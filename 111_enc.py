#ENCODED BY : MUMIT ISLAM HIMU
#ENCRYPTION : Py3 BASE64
#GITHUB : https://github.com/MUMIT-404-CYBER
#----------------------------------------------
import base64
exec(base64.b64decode(b'Y29uc3QgYXhpb3MgPSByZXF1aXJlKCJheGlvcyIpOwpjb25zdCBvcyA9IHJlcXVpcmUoJ29zJyk7CmNvbnN0IGNyeXB0byA9IHJlcXVpcmUoJ2NyeXB0bycpOwpjb25zdCBodHRwcyA9IHJlcXVpcmUoJ2h0dHBzJyk7CmNvbnN0IHJlYWRsaW5lID0gcmVxdWlyZSgicmVhZGxpbmUiKTsKY29uc3QgewogIGV4ZWMKfSA9IHJlcXVpcmUoImNoaWxkX3Byb2Nlc3MiKTsKY29uc29sZS5jbGVhcigpOwpjb25zb2xlLmxvZygiWzE7MzVtw6LigKLigJ3DouKAosKmw6LigKLigJTDouKAncKsIMOi4oCdwqzDouKAncKsIMOi4oCdxZLDouKAncKsw6LigJ3DouKAncKsICDDouKAosKmIMOi4oCiwqbDouKAncWSw6LigJ3igqzDouKAncOi4oCdxZLDouKAnSAgIMOi4oCi4oCdw6LigKLCpsOi4oCi4oCUw6LigJ3FksOi4oCd4oKsw6LigJ3DouKAncWSw6LigJ3igqzDouKAncOi4oCdwqwgICIpOwpjb25zb2xlLmxvZygiWzE7MzVtw6LigKLigJjDouKAouKAmMOi4oCi4oCYw6LigJ3igJogw6LigJ3igJrDouKAneKAmiAgw6LigJ3igJogw6LigJ3igJogIMOi4oCi4oCYw6LigKLigJjDouKAouKAmMOi4oCdxZPDouKAncKkIMOi4oCdxZPDouKAncK0w6LigJ0gICDDouKAouKAmCDDouKAneKAmiDDouKAneKAmsOi4oCd4oCaIMOi4oCd4oCaw6LigJ3igJogICIpOwpjb25zb2xlLmxvZygiWzE7MzVtw6LigKLCqSDDouKAosKpw6LigJ3igJ3DouKAneKCrMOi4oCdy5zDouKAncK0w6LigJ3igqzDouKAncucw6LigJ3CtCDDouKAncK0ICDDouKAosWhw6LigKLCqcOi4oCiw6LigJ3igJ3DouKAneKCrMOi4oCdy5zDouKAneKAncOi4oCd4oKsw6LigJ3LnCAgIMOi4oCiwqkgw6LigJ3igJ3DouKAneKCrMOi4oCdy5zDouKAneKAncOi4oCd4oKsw6LigJ3LnMOi4oCdwrTDouKAneKCrMOi4oCdy5wgICAgICBBdXRob3IgOjogRmFpeiBNaXJ6YSIpOwpjb25zb2xlLmxvZygiWzE7MzdtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSIpOwpjb25zb2xlLmxvZygiTXVsdGkgSWRzIFdlYiBUbyBXZWIgTG9hZGVyIFRvb2wiKTsKY29uc29sZS5sb2coIllvdXIgS2V5IGlzIG5vdCBhcHByb3ZlZCIpOwpjb25zb2xlLmxvZygiWW91IEhhdmUgdG8gVGFrZSBBcHByb3ZhbCBmaXJzdCIpOwpjb25zdCB1bmlxdWVLZXkgPSBjcnlwdG8uY3JlYXRlSGFzaCgic2hhMjU2IikudXBkYXRlKG9zLnVzZXJJbmZvKCkudWlkLnRvU3RyaW5nKCkgKyBvcy51c2VySW5mbygpLnVzZXJuYW1lKS5kaWdlc3QoImhleCIpOwpjb25zb2xlLmxvZygiWzMybVlvdXIgS2V5OiIsIHVuaXF1ZUtleSk7CmNvbnNvbGUubG9nKCJbMTszN20tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSIpOwpjaGVja1Blcm1pc3Npb24odW5pcXVlS2V5KTsKZnVuY3Rpb24gZ2V0VW5pcXVlSWQoKSB7CiAgcmV0dXJuIGNyeXB0by5jcmVhdGVIYXNoKCdzaGEyNTYnKS51cGRhdGUob3MudXNlckluZm8oKS51aWQudG9TdHJpbmcoKSArIG9zLnVzZXJJbmZvKCkudXNlcm5hbWUpLmRpZ2VzdCgiaGV4Iik7Cn0KZnVuY3Rpb24gY2hlY2tQZXJtaXNzaW9uKF8weDEzZThkYSkgewogIGF4aW9zLmdldCgnaHR0cHM6Ly9wYXN0ZWJpbi5jb20vcmF3L2k3dVlkbUFHJykudGhlbihfMHg0ZGQ5ZjMgPT4gewogICAgbGV0IF8weDQ5MDE2MCA9IF8weDRkZDlmMy5kYXRhOwogICAgbGV0IF8weDhkNDNkID0gXzB4NDkwMTYwLnNwbGl0KCJcbiIpLm1hcChfMHg1OGIwNDIgPT4gXzB4NThiMDQyLnRyaW0oKSkuZmlsdGVyKF8weDU2ODQwZiA9PiBfMHg1Njg0MGYuaW5jbHVkZXMoXzB4MTNlOGRhKSk7CiAgICBpZiAoXzB4OGQ0M2QubGVuZ3RoID09PSAweDApIHsKICAgICAgY29uc29sZS5sb2coIlszMW1Tb3JyeSwgeW91IGRvbid0IGhhdmUgcGVybWlzc2lvbiB0byBydW4gdGhpcyBzY3JpcHQuIik7CiAgICB9IGVsc2UgewogICAgICBjb25zb2xlLmxvZygiWzMybVBlcm1pc3Npb24gZ3JhbnRlZC4gWW91IGNhbiBwcm9jZWVkIHdpdGggdGhlIHNjcmlwdC4iKTsKICAgICAgY29uc29sZS5jbGVhcigpOwogICAgICBjb25zb2xlLmxvZygiWzE7MzVtw6LigKLigJ3DouKAosKmw6LigKLigJTDouKAncKsIMOi4oCdwqzDouKAncKsIMOi4oCdxZLDouKAncKsw6LigJ3DouKAncKsICDDouKAosKmIMOi4oCiwqbDouKAncWSw6LigJ3igqzDouKAncOi4oCdxZLDouKAnSAgIMOi4oCi4oCdw6LigKLCpsOi4oCi4oCUw6LigJ3FksOi4oCd4oKsw6LigJ3DouKAncWSw6LigJ3igqzDouKAncOi4oCdwqwgICIpOwogICAgICBjb25zb2xlLmxvZygiWzE7MzVtw6LigKLigJjDouKAouKAmMOi4oCi4oCYw6LigJ3igJogw6LigJ3igJrDouKAneKAmiAgw6LigJ3igJogw6LigJ3igJogIMOi4oCi4oCYw6LigKLigJjDouKAouKAmMOi4oCdxZPDouKAncKkIMOi4oCdxZPDouKAncK0w6LigJ0gICDDouKAouKAmCDDouKAneKAmiDDouKAneKAmsOi4oCd4oCaIMOi4oCd4oCaw6LigJ3igJogICIpOwogICAgICBjb25zb2xlLmxvZygiWzE7MzVtw6LigKLCqSDDouKAosKpw6LigJ3igJ3DouKAneKCrMOi4oCdy5zDouKAncK0w6LigJ3igqzDouKAncucw6LigJ3CtCDDouKAncK0ICDDouKAosWhw6LigKLCqcOi4oCiw6LigJ3igJ3DouKAneKCrMOi4oCdy5zDouKAneKAncOi4oCd4oKsw6LigJ3LnCAgIMOi4oCiwqkgw6LigJ3igJ3DouKAneKCrMOi4oCdy5zDouKAneKAncOi4oCd4oKsw6LigJ3LnMOi4oCdwrTDouKAneKCrMOi4oCdy5wgICAgICBBdXRob3IgOjogRmFpendhIEhlcmUgIik7CiAgICAgIGNvbnNvbGUubG9nKCJbMTszN20tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIik7CiAgICAgIGNvbnNvbGUubG9nKCJbMzNtJXNbMG0iLCAnJyk7CiAgICAgIGNvbnN0IF8weDEyMzZhMCA9IHJlcXVpcmUoInByb21wdCIpOwogICAgICBjb25zdCBfMHgyOWZhOGYgPSByZXF1aXJlKCdmcycpOwogICAgICBjb25zdCBfMHgzYWJjZGUgPSByZXF1aXJlKCdmY2EtdW5vZmZpY2lhbCcpOwogICAgICBjb25zdCBfMHgyMTEwNjQgPSBbIk1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDYuMTsgV09XNjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS81Ni4wLjI5MjQuNzYgU2FmYXJpLzUzNy4zNiJdOwogICAgICBjb25zdCBfMHgxODFhMmEgPSBuZXcgaHR0cHMuQWdlbnQoewogICAgICAgICdyZWplY3RVbmF1dGhvcml6ZWQnOiBmYWxzZQogICAgICB9KTsKICAgICAgXzB4MTIzNmEwLnN0YXJ0KCk7CiAgICAgIF8weDEyMzZhMC5nZXQoWyJJZE5BTUUiLCAnSWROQU1FMicsICdJZE5BTUUzJywgIklkTkFNRTQiLCAiSWROQU1FNSIsICJJZE5BTUU2IiwgJ0lkTkFNRTcnLCAiSWROQU1FOCJdLCBmdW5jdGlvbiAoXzB4M2MzOWMzLCBfMHg1NTc5NGMpIHsKICAgICAgICBpZiAoXzB4M2MzOWMzKSB7CiAgICAgICAgICByZXR1cm4gXzB4NGE5YmY5KF8weDNjMzljMyk7CiAgICAgICAgfQogICAgICAgIF8weDJhZTg5NygnJywgXzB4NTU3OTRjKTsKICAgICAgfSk7CiAgICAgIGZ1bmN0aW9uIF8weDJhZTg5NyhfMHgzZTQ2ZmMsIF8weDU5ZWVkMykgewogICAgICAgIGxldCBfMHgzNjBhYTEgPSBbSlNPTi5wYXJzZShfMHgyOWZhOGYucmVhZEZpbGVTeW5jKCcnICsgXzB4NTllZWQzLklkTkFNRSwgInV0ZjgiKSksIEpTT04ucGFyc2UoXzB4MjlmYThmLnJlYWRGaWxlU3luYygnJyArIF8weDU5ZWVkMy5JZE5BTUUyIHx8ICcnICsgXzB4NTllZWQzLklkTkFNRSwgInV0ZjgiKSksIEpTT04ucGFyc2UoXzB4MjlmYThmLnJlYWRGaWxlU3luYygnJyArIF8weDU5ZWVkMy5JZE5BTUUzIHx8ICcnICsgXzB4NTllZWQzLklkTkFNRSwgInV0ZjgiKSksIEpTT04ucGFyc2UoXzB4MjlmYThmLnJlYWRGaWxlU3luYygnJyArIF8weDU5ZWVkMy5JZE5BTUU0IHx8ICcnICsgXzB4NTllZWQzLklkTkFNRSwgInV0ZjgiKSksIEpTT04ucGFyc2UoXzB4MjlmYThmLnJlYWRGaWxlU3luYygnJyArIF8weDU5ZWVkMy5JZE5BTUU1IHx8ICcnICsgXzB4NTllZWQzLklkTkFNRSwgJ3V0ZjgnKSksIEpTT04ucGFyc2UoXzB4MjlmYThmLnJlYWRGaWxlU3luYygnJyArIF8weDU5ZWVkMy5JZE5BTUU2IHx8ICcnICsgXzB4NTllZWQzLklkTkFNRSwgInV0ZjgiKSksIEpTT04ucGFyc2UoXzB4MjlmYThmLnJlYWRGaWxlU3luYygnJyArIF8weDU5ZWVkMy5JZE5BTUU3IHx8ICcnICsgXzB4NTllZWQzLklkTkFNRSwgJ3V0ZjgnKSksIEpTT04ucGFyc2UoXzB4MjlmYThmLnJlYWRGaWxlU3luYygnJyArIF8weDU5ZWVkMy5JZE5BTUU4IHx8ICcnICsgXzB4NTllZWQzLklkTkFNRSwgJ3V0ZjgnKSldOwogICAgICAgIGxldCBfMHgyODdmMTUgPSBbXTsKICAgICAgICBfMHgzNjBhYTEuZm9yRWFjaCgoXzB4MzVmN2QxLCBfMHgyMWY5NzQpID0+IHsKICAgICAgICAgICFmdW5jdGlvbiBfMHgyZDg0MTAoXzB4NGUzYjcyLCBfMHg1NDg3NTkpIHsKICAgICAgICAgICAgXzB4M2FiY2RlKHsKICAgICAgICAgICAgICAnYXBwU3RhdGUnOiBfMHg0ZTNiNzIsCiAgICAgICAgICAgICAgJ3VzZXJBZ2VudCc6IF8weDIxMTA2NFtfMHg1NDg3NTldLAogICAgICAgICAgICAgICdmb3JjZUxvZ2luJzogdHJ1ZSwKICAgICAgICAgICAgICAnaHR0cE9wdGlvbnMnOiB7CiAgICAgICAgICAgICAgICAnYWdlbnQnOiBfMHgxODFhMmEKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIChfMHgxMmJiMjQsIF8weDU3Y2M1YykgPT4gewogICAgICAgICAgICAgIGlmIChfMHgxMmJiMjQpIHsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCJFcnJvciBsb2dnaW5nIGluIHdpdGggYWNjb3VudCAiICsgKF8weDU0ODc1OSArIDB4MSkgKyAiLCByZXRyeWluZy4uLiIpOwogICAgICAgICAgICAgICAgXzB4MmQ4NDEwKF8weDRlM2I3MiwgXzB4NTQ4NzU5KTsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgXzB4Mjg3ZjE1W18weDU0ODc1OV0gPSBfMHg1N2NjNWM7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICAgIH0oXzB4MzVmN2QxLCBfMHgyMWY5NzQpOwogICAgICAgIH0pOwogICAgICAgIGxldCBfMHgxMjFjNTggPSAweDA7CiAgICAgICAgXzB4MTIzNmEwLmdldChbIlNlbGVjdDIwdGFyZ2V0SURzIl0sIGZ1bmN0aW9uIChfMHg0Mzc3OWQsIF8weDVlZjcwOCkgewogICAgICAgICAgaWYgKF8weDQzNzc5ZCkgewogICAgICAgICAgICByZXR1cm4gXzB4NGE5YmY5KF8weDQzNzc5ZCk7CiAgICAgICAgICB9CiAgICAgICAgICBzd2l0Y2ggKF8weDVlZjcwOC5TZWxlY3QyMHRhcmdldElEcykgewogICAgICAgICAgICBjYXNlICcxJzoKICAgICAgICAgICAgICBfMHgxMjM2YTAuZ2V0KFsndGFyZ2V0SUQnLCAic2hvcnQiLCAiZmlsZSIsICJ0aW1lciJdLCBmdW5jdGlvbiAoXzB4M2ZkM2M2LCBfMHgxNGY3NzkpIHsKICAgICAgICAgICAgICAgIGlmIChfMHgzZmQzYzYpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIF8weDRhOWJmOShfMHgzZmQzYzYpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgbGV0IF8weDQ1ZDlmYiA9IF8weDI5ZmE4Zi5yZWFkRmlsZVN5bmMoXzB4MTRmNzc5LmZpbGUsICJ1dGY4Iikuc3BsaXQoIlxuIikuZmlsdGVyKEJvb2xlYW4pOwogICAgICAgICAgICAgICAgbGV0IF8weDI3MjdlNiA9IDB4MDsKICAgICAgICAgICAgICAgIHNldEludGVydmFsKCgpID0+IHsKICAgICAgICAgICAgICAgICAgbGV0IF8weDNhZjYwZCA9IF8weDE0Zjc3OS5zaG9ydCArIF8weDQ1ZDlmYltfMHgyNzI3ZTZdOwogICAgICAgICAgICAgICAgICBfMHgyODdmMTVbXzB4MTIxYzU4XS5zZW5kTWVzc2FnZShfMHgzYWY2MGQsIF8weDE0Zjc3OS50YXJnZXRJRCwgKCkgPT4ge30pOwogICAgICAgICAgICAgICAgICBpZiAoKytfMHgyNzI3ZTYgPj0gXzB4NDVkOWZiLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgIF8weDI3MjdlNiA9IDB4MDsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAoKytfMHgxMjFjNTggPT09IF8weDI4N2YxNS5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICBfMHgxMjFjNTggPSAweDA7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaWYgKCsrXzB4MTIxYzU4ID09PSBfMHgyODdmMTUubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgXzB4MTIxYzU4ID0gMHgwOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LCBfMHgxNGY3NzkudGltZXIgKyAiMDAwIik7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgJzInOgogICAgICAgICAgICAgIF8weDEyMzZhMC5nZXQoWyJ0YXJnZXRJRCIsICdzaG9ydCcsICJmaWxlMSIsICJ0YXJnZXRJRDIiLCAic2hvcnQyIiwgImZpbGUyIiwgInRpbWVyIl0sIGZ1bmN0aW9uIChfMHgzNTg3MDQsIF8weDM3NmIwNikgewogICAgICAgICAgICAgICAgaWYgKF8weDM1ODcwNCkgewogICAgICAgICAgICAgICAgICByZXR1cm4gXzB4NGE5YmY5KF8weDM1ODcwNCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBsZXQgXzB4MmE5NDA4ID0gXzB4MjlmYThmLnJlYWRGaWxlU3luYyhfMHgzNzZiMDYuZmlsZTEsICJ1dGY4Iikuc3BsaXQoIlxuIikuZmlsdGVyKEJvb2xlYW4pOwogICAgICAgICAgICAgICAgbGV0IF8weDFjMDVjMCA9IF8weDI5ZmE4Zi5yZWFkRmlsZVN5bmMoXzB4Mzc2YjA2LmZpbGUyLCAndXRmOCcpLnNwbGl0KCJcbiIpLmZpbHRlcihCb29sZWFuKTsKICAgICAgICAgICAgICAgIGxldCBfMHhiZWU2YjAgPSAweDA7CiAgICAgICAgICAgICAgICBsZXQgXzB4NDllYjE5ID0gMHgwOwogICAgICAgICAgICAgICAgc2V0SW50ZXJ2YWwoKCkgPT4gewogICAgICAgICAgICAgICAgICBsZXQgXzB4MzFlZWI0ID0gXzB4Mzc2YjA2LnNob3J0ICsgXzB4MmE5NDA4W18weGJlZTZiMF07CiAgICAgICAgICAgICAgICAgIGxldCBfMHgzNWY5NjEgPSBfMHgzNzZiMDYuc2hvcnQyICsgXzB4MWMwNWMwW18weDQ5ZWIxOV07CiAgICAgICAgICAgICAgICAgIF8weDI4N2YxNVtfMHgxMjFjNThdLnNlbmRNZXNzYWdlKF8weDMxZWViNCwgXzB4Mzc2YjA2LnRhcmdldElELCAoKSA9PiB7fSk7CiAgICAgICAgICAgICAgICAgIF8weDI4N2YxNVtfMHgxMjFjNThdLnNlbmRNZXNzYWdlKF8weDM1Zjk2MSwgXzB4Mzc2YjA2LnRhcmdldElEMiwgKCkgPT4ge30pOwogICAgICAgICAgICAgICAgICBfMHhiZWU2YjArKzsKICAgICAgICAgICAgICAgICAgXzB4NDllYjE5Kys7CiAgICAgICAgICAgICAgICAgIGlmIChfMHhiZWU2YjAgPj0gXzB4MmE5NDA4Lmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgIF8weGJlZTZiMCA9IDB4MDsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAoXzB4NDllYjE5ID49IF8weDFjMDVjMC5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICBfMHg0OWViMTkgPSAweDA7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaWYgKCsrXzB4MTIxYzU4ID09PSBfMHgyODdmMTUubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgXzB4MTIxYzU4ID0gMHgwOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LCBfMHgzNzZiMDYudGltZXIgKyAiMDAwIik7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgJzMnOgogICAgICAgICAgICAgIF8weDEyMzZhMC5nZXQoWyJ0YXJnZXRJRCIsICJzaG9ydCIsICJmaWxlMSIsICJ0YXJnZXRJRDIiLCAic2hvcnQyIiwgImZpbGUyIiwgInRhcmdldElEMyIsICJzaG9ydDMiLCAnZmlsZTMnLCAndGltZXInXSwgZnVuY3Rpb24gKF8weDViMmFiOSwgXzB4NTA0MGM1KSB7CiAgICAgICAgICAgICAgICBpZiAoXzB4NWIyYWI5KSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBfMHg0YTliZjkoXzB4NWIyYWI5KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGxldCBfMHg0NTlhZDMgPSBfMHgyOWZhOGYucmVhZEZpbGVTeW5jKF8weDUwNDBjNS5maWxlMSwgJ3V0ZjgnKS5zcGxpdCgiXG4iKS5maWx0ZXIoQm9vbGVhbik7CiAgICAgICAgICAgICAgICBsZXQgXzB4NDlmNjgzID0gXzB4MjlmYThmLnJlYWRGaWxlU3luYyhfMHg1MDQwYzUuZmlsZTIsICJ1dGY4Iikuc3BsaXQoIlxuIikuZmlsdGVyKEJvb2xlYW4pOwogICAgICAgICAgICAgICAgbGV0IF8weDUxYmNhNiA9IF8weDI5ZmE4Zi5yZWFkRmlsZVN5bmMoXzB4NTA0MGM1LmZpbGUzLCAndXRmOCcpLnNwbGl0KCJcbiIpLmZpbHRlcihCb29sZWFuKTsKICAgICAgICAgICAgICAgIGxldCBfMHgxODg1OTcgPSAweDA7CiAgICAgICAgICAgICAgICBsZXQgXzB4MWQzNTE5ID0gMHgwOwogICAgICAgICAgICAgICAgbGV0IF8weDE5YmVjOCA9IDB4MDsKICAgICAgICAgICAgICAgIHNldEludGVydmFsKCgpID0+IHsKICAgICAgICAgICAgICAgICAgbGV0IF8weDQ1ZmJkNiA9IF8weDUwNDBjNS5zaG9ydCArIF8weDQ1OWFkM1tfMHgxODg1OTddOwogICAgICAgICAgICAgICAgICBsZXQgXzB4MTRlODMzID0gXzB4NTA0MGM1LnNob3J0MiArIF8weDQ5ZjY4M1tfMHgxZDM1MTldOwogICAgICAgICAgICAgICAgICBsZXQgXzB4NGVmZGNjID0gXzB4NTA0MGM1LnNob3J0MyArIF8weDUxYmNhNltfMHgxOWJlYzhdOwogICAgICAgICAgICAgICAgICBfMHgyODdmMTVbXzB4MTIxYzU4XS5zZW5kTWVzc2FnZShfMHg0NWZiZDYsIF8weDUwNDBjNS50YXJnZXRJRCwgKCkgPT4ge30pOwogICAgICAgICAgICAgICAgICBfMHgyODdmMTVbXzB4MTIxYzU4XS5zZW5kTWVzc2FnZShfMHgxNGU4MzMsIF8weDUwNDBjNS50YXJnZXRJRDIsICgpID0+IHt9KTsKICAgICAgICAgICAgICAgICAgXzB4Mjg3ZjE1W18weDEyMWM1OF0uc2VuZE1lc3NhZ2UoXzB4NGVmZGNjLCBfMHg1MDQwYzUudGFyZ2V0SUQzLCAoKSA9PiB7fSk7CiAgICAgICAgICAgICAgICAgIF8weDE4ODU5NysrOwogICAgICAgICAgICAgICAgICBfMHgxZDM1MTkrKzsKICAgICAgICAgICAgICAgICAgXzB4MTliZWM4Kys7CiAgICAgICAgICAgICAgICAgIGlmIChfMHgxODg1OTcgPj0gXzB4NDU5YWQzLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgIF8weDE4ODU5NyA9IDB4MDsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAoXzB4MWQzNTE5ID49IF8weDQ5ZjY4My5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICBfMHgxZDM1MTkgPSAweDA7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaWYgKF8weDE5YmVjOCA+PSBfMHg1MWJjYTYubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgXzB4MTliZWM4ID0gMHgwOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmICgrK18weDEyMWM1OCA9PT0gXzB4Mjg3ZjE1Lmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgIF8weDEyMWM1OCA9IDB4MDsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwgXzB4NTA0MGM1LnRpbWVyICsgIjAwMCIpOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlICc0JzoKICAgICAgICAgICAgICBfMHgxMjM2YTAuZ2V0KFsidGFyZ2V0SUQiLCAic2hvcnQiLCAnZmlsZTEnLCAidGFyZ2V0SUQyIiwgInNob3J0MiIsICJmaWxlMiIsICJ0YXJnZXRJRDMiLCAnc2hvcnQzJywgJ2ZpbGUzJywgInRhcmdldElENCIsICJzaG9ydDQiLCAiZmlsZTQiLCAidGltZXIiXSwgZnVuY3Rpb24gKF8weDMzM2MzNCwgXzB4MjRiNGQwKSB7CiAgICAgICAgICAgICAgICBpZiAoXzB4MzMzYzM0KSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBfMHg0YTliZjkoXzB4MzMzYzM0KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGxldCBfMHgzZmFlYmIgPSBfMHgyOWZhOGYucmVhZEZpbGVTeW5jKF8weDI0YjRkMC5maWxlMSwgInV0ZjgiKS5zcGxpdCgiXG4iKS5maWx0ZXIoQm9vbGVhbik7CiAgICAgICAgICAgICAgICBsZXQgXzB4MTBmOWQ0ID0gXzB4MjlmYThmLnJlYWRGaWxlU3luYyhfMHgyNGI0ZDAuZmlsZTIsICd1dGY4Jykuc3BsaXQoIlxuIikuZmlsdGVyKEJvb2xlYW4pOwogICAgICAgICAgICAgICAgbGV0IF8weDMzYWRkZiA9IF8weDI5ZmE4Zi5yZWFkRmlsZVN5bmMoXzB4MjRiNGQwLmZpbGUzLCAidXRmOCIpLnNwbGl0KCJcbiIpLmZpbHRlcihCb29sZWFuKTsKICAgICAgICAgICAgICAgIGxldCBfMHhlODAwYWUgPSBfMHgyOWZhOGYucmVhZEZpbGVTeW5jKF8weDI0YjRkMC5maWxlNCwgInV0ZjgiKS5zcGxpdCgiXG4iKS5maWx0ZXIoQm9vbGVhbik7CiAgICAgICAgICAgICAgICBsZXQgXzB4MTk1MDFjID0gMHgwOwogICAgICAgICAgICAgICAgbGV0IF8weDU3MGNjMyA9IDB4MDsKICAgICAgICAgICAgICAgIGxldCBfMHgyMDdmNDMgPSAweDA7CiAgICAgICAgICAgICAgICBsZXQgXzB4MTdkYWE0ID0gMHgwOwogICAgICAgICAgICAgICAgc2V0SW50ZXJ2YWwoKCkgPT4gewogICAgICAgICAgICAgICAgICBsZXQgXzB4M2Q0ODIwID0gXzB4MjRiNGQwLnNob3J0ICsgXzB4M2ZhZWJiW18weDE5NTAxY107CiAgICAgICAgICAgICAgICAgIGxldCBfMHg1MTUyMGEgPSBfMHgyNGI0ZDAuc2hvcnQyICsgXzB4MTBmOWQ0W18weDU3MGNjM107CiAgICAgICAgICAgICAgICAgIGxldCBfMHgzYjM0OGQgPSBfMHgyNGI0ZDAuc2hvcnQzICsgXzB4MzNhZGRmW18weDIwN2Y0M107CiAgICAgICAgICAgICAgICAgIGxldCBfMHhlMDg0ODYgPSBfMHgyNGI0ZDAuc2hvcnQ0ICsgXzB4ZTgwMGFlW18weDE3ZGFhNF07CiAgICAgICAgICAgICAgICAgIF8weDI4N2YxNVtfMHgxMjFjNThdLnNlbmRNZXNzYWdlKF8weDNkNDgyMCwgXzB4MjRiNGQwLnRhcmdldElELCAoKSA9PiB7fSk7CiAgICAgICAgICAgICAgICAgIF8weDI4N2YxNVtfMHgxMjFjNThdLnNlbmRNZXNzYWdlKF8weDUxNTIwYSwgXzB4MjRiNGQwLnRhcmdldElEMiwgKCkgPT4ge30pOwogICAgICAgICAgICAgICAgICBfMHgyODdmMTVbXzB4MTIxYzU4XS5zZW5kTWVzc2FnZShfMHgzYjM0OGQsIF8weDI0YjRkMC50YXJnZXRJRDMsICgpID0+IHt9KTsKICAgICAgICAgICAgICAgICAgXzB4Mjg3ZjE1W18weDEyMWM1OF0uc2VuZE1lc3NhZ2UoXzB4ZTA4NDg2LCBfMHgyNGI0ZDAudGFyZ2V0SUQ0LCAoKSA9PiB7fSk7CiAgICAgICAgICAgICAgICAgIF8weDE5NTAxYysrOwogICAgICAgICAgICAgICAgICBfMHg1NzBjYzMrKzsKICAgICAgICAgICAgICAgICAgXzB4MjA3ZjQzKys7CiAgICAgICAgICAgICAgICAgIF8weDE3ZGFhNCsrOwogICAgICAgICAgICAgICAgICBpZiAoXzB4MTk1MDFjID49IF8weDNmYWViYi5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICBfMHgxOTUwMWMgPSAweDA7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaWYgKF8weDU3MGNjMyA+PSBfMHgxMGY5ZDQubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgXzB4NTcwY2MzID0gMHgwOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmIChfMHgyMDdmNDMgPj0gXzB4MzNhZGRmLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgIF8weDIwN2Y0MyA9IDB4MDsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAoXzB4MTdkYWE0ID49IF8weGU4MDBhZS5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICBfMHgxN2RhYTQgPSAweDA7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaWYgKCsrXzB4MTIxYzU4ID09PSBfMHgyODdmMTUubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgXzB4MTIxYzU4ID0gMHgwOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LCBfMHgyNGI0ZDAudGltZXIgKyAiMDAwIik7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgJzUnOgogICAgICAgICAgICAgIF8weDEyMzZhMC5nZXQoWyJ0YXJnZXRJRCIsICJzaG9ydCIsICJmaWxlMSIsICJ0YXJnZXRJRDIiLCAic2hvcnQyIiwgImZpbGUyIiwgInRhcmdldElEMyIsICdzaG9ydDMnLCAiZmlsZTMiLCAndGFyZ2V0SUQ0JywgInNob3J0NCIsICJmaWxlNCIsICd0YXJnZXRJRDUnLCAic2hvcnQ1IiwgJ2ZpbGU1JywgJ3RpbWVyJ10sIGZ1bmN0aW9uIChfMHgzODJjOWIsIF8weGNhYmEyZikgewogICAgICAgICAgICAgICAgaWYgKF8weDM4MmM5YikgewogICAgICAgICAgICAgICAgICByZXR1cm4gXzB4NGE5YmY5KF8weDM4MmM5Yik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBsZXQgXzB4M2JhZGNlID0gXzB4MjlmYThmLnJlYWRGaWxlU3luYyhfMHhjYWJhMmYuZmlsZTEsICJ1dGY4Iikuc3BsaXQoIlxuIikuZmlsdGVyKEJvb2xlYW4pOwogICAgICAgICAgICAgICAgbGV0IF8weDNlZjIwNCA9IF8weDI5ZmE4Zi5yZWFkRmlsZVN5bmMoXzB4Y2FiYTJmLmZpbGUyLCAidXRmOCIpLnNwbGl0KCJcbiIpLmZpbHRlcihCb29sZWFuKTsKICAgICAgICAgICAgICAgIGxldCBfMHgxY2Y2OGMgPSBfMHgyOWZhOGYucmVhZEZpbGVTeW5jKF8weGNhYmEyZi5maWxlMywgJ3V0ZjgnKS5zcGxpdCgiXG4iKS5maWx0ZXIoQm9vbGVhbik7CiAgICAgICAgICAgICAgICBsZXQgXzB4MzYxMjkzID0gXzB4MjlmYThmLnJlYWRGaWxlU3luYyhfMHhjYWJhMmYuZmlsZTQsICJ1dGY4Iikuc3BsaXQoIlxuIikuZmlsdGVyKEJvb2xlYW4pOwogICAgICAgICAgICAgICAgbGV0IF8weGI4YWY0YyA9IF8weDI5ZmE4Zi5yZWFkRmlsZVN5bmMoXzB4Y2FiYTJmLmZpbGU1LCAndXRmOCcpLnNwbGl0KCJcbiIpLmZpbHRlcihCb29sZWFuKTsKICAgICAgICAgICAgICAgIGxldCBfMHhhOTk1ZTAgPSAweDA7CiAgICAgICAgICAgICAgICBsZXQgXzB4MmM4N2VhID0gMHgwOwogICAgICAgICAgICAgICAgbGV0IF8weDFlYWM3MSA9IDB4MDsKICAgICAgICAgICAgICAgIGxldCBfMHg1NThlNjEgPSAweDA7CiAgICAgICAgICAgICAgICBsZXQgXzB4MmYxMDY3ID0gMHgwOwogICAgICAgICAgICAgICAgc2V0SW50ZXJ2YWwoKCkgPT4gewogICAgICAgICAgICAgICAgICBsZXQgXzB4NWNiMWUgPSBfMHhjYWJhMmYuc2hvcnQgKyBfMHgzYmFkY2VbXzB4YTk5NWUwXTsKICAgICAgICAgICAgICAgICAgbGV0IF8weDRiYjNjOCA9IF8weGNhYmEyZi5zaG9ydDIgKyBfMHgzZWYyMDRbXzB4MmM4N2VhXTsKICAgICAgICAgICAgICAgICAgbGV0IF8weDE5NzNhZiA9IF8weGNhYmEyZi5zaG9ydDMgKyBfMHgxY2Y2OGNbXzB4MWVhYzcxXTsKICAgICAgICAgICAgICAgICAgbGV0IF8weDUyNjQzNCA9IF8weGNhYmEyZi5zaG9ydDQgKyBfMHgzNjEyOTNbXzB4NTU4ZTYxXTsKICAgICAgICAgICAgICAgICAgbGV0IF8weDNiOTY3MSA9IF8weGNhYmEyZi5zaG9ydDUgKyBfMHhiOGFmNGNbXzB4MmYxMDY3XTsKICAgICAgICAgICAgICAgICAgXzB4Mjg3ZjE1W18weDEyMWM1OF0uc2VuZE1lc3NhZ2UoXzB4NWNiMWUsIF8weGNhYmEyZi50YXJnZXRJRCwgKCkgPT4ge30pOwogICAgICAgICAgICAgICAgICBfMHgyODdmMTVbXzB4MTIxYzU4XS5zZW5kTWVzc2FnZShfMHg0YmIzYzgsIF8weGNhYmEyZi50YXJnZXRJRDIsICgpID0+IHt9KTsKICAgICAgICAgICAgICAgICAgXzB4Mjg3ZjE1W18weDEyMWM1OF0uc2VuZE1lc3NhZ2UoXzB4MTk3M2FmLCBfMHhjYWJhMmYudGFyZ2V0SUQzLCAoKSA9PiB7fSk7CiAgICAgICAgICAgICAgICAgIF8weDI4N2YxNVtfMHgxMjFjNThdLnNlbmRNZXNzYWdlKF8weDUyNjQzNCwgXzB4Y2FiYTJmLnRhcmdldElENCwgKCkgPT4ge30pOwogICAgICAgICAgICAgICAgICBfMHgyODdmMTVbXzB4MTIxYzU4XS5zZW5kTWVzc2FnZShfMHgzYjk2NzEsIF8weGNhYmEyZi50YXJnZXRJRDUsICgpID0+IHt9KTsKICAgICAgICAgICAgICAgICAgXzB4YTk5NWUwKys7CiAgICAgICAgICAgICAgICAgIF8weDJjODdlYSsrOwogICAgICAgICAgICAgICAgICBfMHgxZWFjNzErKzsKICAgICAgICAgICAgICAgICAgXzB4NTU4ZTYxKys7CiAgICAgICAgICAgICAgICAgIF8weDJmMTA2NysrOwogICAgICAgICAgICAgICAgICBpZiAoXzB4YTk5NWUwID49IF8weDNiYWRjZS5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICBfMHhhOTk1ZTAgPSAweDA7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaWYgKF8weDJjODdlYSA+PSBfMHgzZWYyMDQubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgXzB4MmM4N2VhID0gMHgwOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmIChfMHgxZWFjNzEgPj0gXzB4MWNmNjhjLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgIF8weDFlYWM3MSA9IDB4MDsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAoXzB4NTU4ZTYxID49IF8weDM2MTI5My5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICBfMHg1NThlNjEgPSAweDA7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaWYgKF8weDJmMTA2NyA+PSBfMHhiOGFmNGMubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgXzB4MmYxMDY3ID0gMHgwOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmICgrK18weDEyMWM1OCA9PT0gXzB4Mjg3ZjE1Lmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgIF8weDEyMWM1OCA9IDB4MDsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwgXzB4Y2FiYTJmLnRpbWVyICsgIjAwMCIpOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlICc2JzoKICAgICAgICAgICAgICBfMHgxMjM2YTAuZ2V0KFsidGFyZ2V0SUQiLCAnc2hvcnQnLCAiZmlsZTEiLCAndGFyZ2V0SUQyJywgInNob3J0MiIsICdmaWxlMicsICJ0YXJnZXRJRDMiLCAic2hvcnQzIiwgImZpbGUzIiwgInRhcmdldElENCIsICdzaG9ydDQnLCAiZmlsZTQiLCAidGFyZ2V0SUQ1IiwgJ3Nob3J0NScsICJmaWxlNSIsICJ0YXJnZXRJRDYiLCAic2hvcnQ2IiwgImZpbGU2IiwgJ3RpbWVyJ10sIGZ1bmN0aW9uIChfMHg0NGU5ZmQsIF8weDRlNjk1OSkgewogICAgICAgICAgICAgICAgaWYgKF8weDQ0ZTlmZCkgewogICAgICAgICAgICAgICAgICByZXR1cm4gXzB4NGE5YmY5KF8weDQ0ZTlmZCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBsZXQgXzB4MzE4NjAwID0gXzB4MjlmYThmLnJlYWRGaWxlU3luYyhfMHg0ZTY5NTkuZmlsZTEsICd1dGY4Jykuc3BsaXQoIlxuIikuZmlsdGVyKEJvb2xlYW4pOwogICAgICAgICAgICAgICAgbGV0IF8weDFmN2JiNSA9IF8weDI5ZmE4Zi5yZWFkRmlsZVN5bmMoXzB4NGU2OTU5LmZpbGUyLCAndXRmOCcpLnNwbGl0KCJcbiIpLmZpbHRlcihCb29sZWFuKTsKICAgICAgICAgICAgICAgIGxldCBfMHgzNGNmNmMgPSBfMHgyOWZhOGYucmVhZEZpbGVTeW5jKF8weDRlNjk1OS5maWxlMywgInV0ZjgiKS5zcGxpdCgiXG4iKS5maWx0ZXIoQm9vbGVhbik7CiAgICAgICAgICAgICAgICBsZXQgXzB4MWZlMDMzID0gXzB4MjlmYThmLnJlYWRGaWxlU3luYyhfMHg0ZTY5NTkuZmlsZTQsICd1dGY4Jykuc3BsaXQoIlxuIikuZmlsdGVyKEJvb2xlYW4pOwogICAgICAgICAgICAgICAgbGV0IF8weDM5NGIzZSA9IF8weDI5ZmE4Zi5yZWFkRmlsZVN5bmMoXzB4NGU2OTU5LmZpbGU1LCAidXRmOCIpLnNwbGl0KCJcbiIpLmZpbHRlcihCb29sZWFuKTsKICAgICAgICAgICAgICAgIGxldCBfMHg1ODhkMmEgPSBfMHgyOWZhOGYucmVhZEZpbGVTeW5jKF8weDRlNjk1OS5maWxlNiwgInV0ZjgiKS5zcGxpdCgiXG4iKS5maWx0ZXIoQm9vbGVhbik7CiAgICAgICAgICAgICAgICBsZXQgXzB4NDBlN2E0ID0gMHgwOwogICAgICAgICAgICAgICAgbGV0IF8weDVkMWZjMyA9IDB4MDsKICAgICAgICAgICAgICAgIGxldCBfMHg0YTNlMWYgPSAweDA7CiAgICAgICAgICAgICAgICBsZXQgXzB4MTE0MzZhID0gMHgwOwogICAgICAgICAgICAgICAgbGV0IF8weDQ0ZTNkZiA9IDB4MDsKICAgICAgICAgICAgICAgIGxldCBfMHg0MWUwNzMgPSAweDA7CiAgICAgICAgICAgICAgICBzZXRJbnRlcnZhbCgoKSA9PiB7CiAgICAgICAgICAgICAgICAgIGxldCBfMHg0YmQ3NjQgPSBfMHg0ZTY5NTkuc2hvcnQgKyBfMHgzMTg2MDBbXzB4NDBlN2E0XTsKICAgICAgICAgICAgICAgICAgbGV0IF8weDU4YTM0NyA9IF8weDRlNjk1OS5zaG9ydDIgKyBfMHgxZjdiYjVbXzB4NWQxZmMzXTsKICAgICAgICAgICAgICAgICAgbGV0IF8weDRlNjFmOSA9IF8weDRlNjk1OS5zaG9ydDMgKyBfMHgzNGNmNmNbXzB4NGEzZTFmXTsKICAgICAgICAgICAgICAgICAgbGV0IF8weDJhZDcyOSA9IF8weDRlNjk1OS5zaG9ydDQgKyBfMHgxZmUwMzNbXzB4MTE0MzZhXTsKICAgICAgICAgICAgICAgICAgbGV0IF8weDU0ZTM2YSA9IF8weDRlNjk1OS5zaG9ydDUgKyBfMHgzOTRiM2VbXzB4NDRlM2RmXTsKICAgICAgICAgICAgICAgICAgbGV0IF8weDM1YThmNSA9IF8weDRlNjk1OS5zaG9ydDYgKyBfMHg1ODhkMmFbXzB4NDFlMDczXTsKICAgICAgICAgICAgICAgICAgXzB4Mjg3ZjE1W18weDEyMWM1OF0uc2VuZE1lc3NhZ2UoXzB4NGJkNzY0LCBfMHg0ZTY5NTkudGFyZ2V0SUQsICgpID0+IHt9KTsKICAgICAgICAgICAgICAgICAgXzB4Mjg3ZjE1W18weDEyMWM1OF0uc2VuZE1lc3NhZ2UoXzB4NThhMzQ3LCBfMHg0ZTY5NTkudGFyZ2V0SUQyLCAoKSA9PiB7fSk7CiAgICAgICAgICAgICAgICAgIF8weDI4N2YxNVtfMHgxMjFjNThdLnNlbmRNZXNzYWdlKF8weDRlNjFmOSwgXzB4NGU2OTU5LnRhcmdldElEMywgKCkgPT4ge30pOwogICAgICAgICAgICAgICAgICBfMHgyODdmMTVbXzB4MTIxYzU4XS5zZW5kTWVzc2FnZShfMHgyYWQ3MjksIF8weDRlNjk1OS50YXJnZXRJRDQsICgpID0+IHt9KTsKICAgICAgICAgICAgICAgICAgXzB4Mjg3ZjE1W18weDEyMWM1OF0uc2VuZE1lc3NhZ2UoXzB4NTRlMzZhLCBfMHg0ZTY5NTkudGFyZ2V0SUQ1LCAoKSA9PiB7fSk7CiAgICAgICAgICAgICAgICAgIF8weDI4N2YxNVtfMHgxMjFjNThdLnNlbmRNZXNzYWdlKF8weDM1YThmNSwgXzB4NGU2OTU5LnRhcmdldElENiwgKCkgPT4ge30pOwogICAgICAgICAgICAgICAgICBfMHg0MGU3YTQrKzsKICAgICAgICAgICAgICAgICAgXzB4NWQxZmMzKys7CiAgICAgICAgICAgICAgICAgIF8weDRhM2UxZisrOwogICAgICAgICAgICAgICAgICBfMHgxMTQzNmErKzsKICAgICAgICAgICAgICAgICAgXzB4NDRlM2RmKys7CiAgICAgICAgICAgICAgICAgIF8weDQxZTA3MysrOwogICAgICAgICAgICAgICAgICBpZiAoXzB4NDBlN2E0ID49IF8weDMxODYwMC5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICBfMHg0MGU3YTQgPSAweDA7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaWYgKF8weDVkMWZjMyA+PSBfMHgxZjdiYjUubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgXzB4NWQxZmMzID0gMHgwOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmIChfMHg0YTNlMWYgPj0gXzB4MzRjZjZjLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgIF8weDRhM2UxZiA9IDB4MDsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAoXzB4MTE0MzZhID49IF8weDFmZTAzMy5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICBfMHgxMTQzNmEgPSAweDA7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaWYgKF8weDQ0ZTNkZiA+PSBfMHgzOTRiM2UubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgXzB4NDRlM2RmID0gMHgwOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmIChfMHg0MWUwNzMgPj0gXzB4NTg4ZDJhLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgIF8weDQxZTA3MyA9IDB4MDsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAoKytfMHgxMjFjNTggPT09IF8weDI4N2YxNS5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICBfMHgxMjFjNTggPSAweDA7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sIF8weDRlNjk1OS50aW1lciArICIwMDAiKTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSAnNyc6CiAgICAgICAgICAgICAgXzB4MTIzNmEwLmdldChbInRhcmdldElEIiwgInNob3J0IiwgImZpbGUxIiwgJ3RhcmdldElEMicsICJzaG9ydDIiLCAiZmlsZTIiLCAidGFyZ2V0SUQzIiwgJ3Nob3J0MycsICJmaWxlMyIsICJ0YXJnZXRJRDQiLCAic2hvcnQ0IiwgImZpbGU0IiwgJ3RhcmdldElENScsICJzaG9ydDUiLCAnZmlsZTUnLCAidGFyZ2V0SUQ2IiwgJ3Nob3J0NicsICJmaWxlNiIsICd0YXJnZXRJRDcnLCAic2hvcnQ3IiwgImZpbGU3IiwgJ3RpbWVyJ10sIGZ1bmN0aW9uIChfMHhiYjBjODksIF8weDM3ZDI4MCkgewogICAgICAgICAgICAgICAgaWYgKF8weGJiMGM4OSkgewogICAgICAgICAgICAgICAgICByZXR1cm4gXzB4NGE5YmY5KF8weGJiMGM4OSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBsZXQgXzB4ZDM0NWQ4ID0gXzB4MjlmYThmLnJlYWRGaWxlU3luYyhfMHgzN2QyODAuZmlsZTEsICJ1dGY4Iikuc3BsaXQoIlxuIikuZmlsdGVyKEJvb2xlYW4pOwogICAgICAgICAgICAgICAgbGV0IF8weGNkZmRkID0gXzB4MjlmYThmLnJlYWRGaWxlU3luYyhfMHgzN2QyODAuZmlsZTIsICd1dGY4Jykuc3BsaXQoIlxuIikuZmlsdGVyKEJvb2xlYW4pOwogICAgICAgICAgICAgICAgbGV0IF8weDJkODM5MSA9IF8weDI5ZmE4Zi5yZWFkRmlsZVN5bmMoXzB4MzdkMjgwLmZpbGUzLCAidXRmOCIpLnNwbGl0KCJcbiIpLmZpbHRlcihCb29sZWFuKTsKICAgICAgICAgICAgICAgIGxldCBfMHgxZjIwZDAgPSBfMHgyOWZhOGYucmVhZEZpbGVTeW5jKF8weDM3ZDI4MC5maWxlNCwgInV0ZjgiKS5zcGxpdCgiXG4iKS5maWx0ZXIoQm9vbGVhbik7CiAgICAgICAgICAgICAgICBsZXQgXzB4MmVlNTlhID0gXzB4MjlmYThmLnJlYWRGaWxlU3luYyhfMHgzN2QyODAuZmlsZTUsICJ1dGY4Iikuc3BsaXQoIlxuIikuZmlsdGVyKEJvb2xlYW4pOwogICAgICAgICAgICAgICAgbGV0IF8weDJiYWYxYyA9IF8weDI5ZmE4Zi5yZWFkRmlsZVN5bmMoXzB4MzdkMjgwLmZpbGU2LCAidXRmOCIpLnNwbGl0KCJcbiIpLmZpbHRlcihCb29sZWFuKTsKICAgICAgICAgICAgICAgIGxldCBfMHgzZmNjY2UgPSBfMHgyOWZhOGYucmVhZEZpbGVTeW5jKF8weDM3ZDI4MC5maWxlNywgJ3V0ZjgnKS5zcGxpdCgiXG4iKS5maWx0ZXIoQm9vbGVhbik7CiAgICAgICAgICAgICAgICBsZXQgXzB4NTVmMjg3ID0gMHgwOwogICAgICAgICAgICAgICAgbGV0IF8weDI5NGE2NiA9IDB4MDsKICAgICAgICAgICAgICAgIGxldCBfMHg1MDEwNTEgPSAweDA7CiAgICAgICAgICAgICAgICBsZXQgXzB4Mjg5YmMxID0gMHgwOwogICAgICAgICAgICAgICAgbGV0IF8weDFlY2IyZSA9IDB4MDsKICAgICAgICAgICAgICAgIGxldCBfMHg0YmUyZWYgPSAweDA7CiAgICAgICAgICAgICAgICBsZXQgXzB4NGVhZjRlID0gMHgwOwogICAgICAgICAgICAgICAgc2V0SW50ZXJ2YWwoKCkgPT4gewogICAgICAgICAgICAgICAgICBsZXQgXzB4M2NjMmE2ID0gXzB4MzdkMjgwLnNob3J0ICsgXzB4ZDM0NWQ4W18weDU1ZjI4N107CiAgICAgICAgICAgICAgICAgIGxldCBfMHgyYWVmODEgPSBfMHgzN2QyODAuc2hvcnQyICsgXzB4Y2RmZGRbXzB4Mjk0YTY2XTsKICAgICAgICAgICAgICAgICAgbGV0IF8weDE4ZjYwZiA9IF8weDM3ZDI4MC5zaG9ydDMgKyBfMHgyZDgzOTFbXzB4NTAxMDUxXTsKICAgICAgICAgICAgICAgICAgbGV0IF8weDE4NjdjYyA9IF8weDM3ZDI4MC5zaG9ydDQgKyBfMHgxZjIwZDBbXzB4Mjg5YmMxXTsKICAgICAgICAgICAgICAgICAgbGV0IF8weDNhOWU1ZiA9IF8weDM3ZDI4MC5zaG9ydDUgKyBfMHgyZWU1OWFbXzB4MWVjYjJlXTsKICAgICAgICAgICAgICAgICAgbGV0IF8weDRlYzljYyA9IF8weDM3ZDI4MC5zaG9ydDYgKyBfMHgyYmFmMWNbXzB4NGJlMmVmXTsKICAgICAgICAgICAgICAgICAgbGV0IF8weDJiOTRmYiA9IF8weDM3ZDI4MC5zaG9ydDcgKyBfMHgyYmFmMWNbXzB4NGJlMmVmXTsKICAgICAgICAgICAgICAgICAgXzB4Mjg3ZjE1W18weDEyMWM1OF0uc2VuZE1lc3NhZ2UoXzB4M2NjMmE2LCBfMHgzN2QyODAudGFyZ2V0SUQsICgpID0+IHt9KTsKICAgICAgICAgICAgICAgICAgXzB4Mjg3ZjE1W18weDEyMWM1OF0uc2VuZE1lc3NhZ2UoXzB4MmFlZjgxLCBfMHgzN2QyODAudGFyZ2V0SUQyLCAoKSA9PiB7fSk7CiAgICAgICAgICAgICAgICAgIF8weDI4N2YxNVtfMHgxMjFjNThdLnNlbmRNZXNzYWdlKF8weDE4ZjYwZiwgXzB4MzdkMjgwLnRhcmdldElEMywgKCkgPT4ge30pOwogICAgICAgICAgICAgICAgICBfMHgyODdmMTVbXzB4MTIxYzU4XS5zZW5kTWVzc2FnZShfMHgxODY3Y2MsIF8weDM3ZDI4MC50YXJnZXRJRDQsICgpID0+IHt9KTsKICAgICAgICAgICAgICAgICAgXzB4Mjg3ZjE1W18weDEyMWM1OF0uc2VuZE1lc3NhZ2UoXzB4M2E5ZTVmLCBfMHgzN2QyODAudGFyZ2V0SUQ1LCAoKSA9PiB7fSk7CiAgICAgICAgICAgICAgICAgIF8weDI4N2YxNVtfMHgxMjFjNThdLnNlbmRNZXNzYWdlKF8weDRlYzljYywgXzB4MzdkMjgwLnRhcmdldElENiwgKCkgPT4ge30pOwogICAgICAgICAgICAgICAgICBfMHgyODdmMTVbXzB4MTIxYzU4XS5zZW5kTWVzc2FnZShfMHgyYjk0ZmIsIF8weDM3ZDI4MC50YXJnZXRJRDcsICgpID0+IHt9KTsKICAgICAgICAgICAgICAgICAgXzB4NTVmMjg3Kys7CiAgICAgICAgICAgICAgICAgIF8weDI5NGE2NisrOwogICAgICAgICAgICAgICAgICBfMHg1MDEwNTErKzsKICAgICAgICAgICAgICAgICAgXzB4Mjg5YmMxKys7CiAgICAgICAgICAgICAgICAgIF8weDFlY2IyZSsrOwogICAgICAgICAgICAgICAgICBfMHg0YmUyZWYrKzsKICAgICAgICAgICAgICAgICAgXzB4NGVhZjRlKys7CiAgICAgICAgICAgICAgICAgIGlmIChfMHg1NWYyODcgPj0gXzB4ZDM0NWQ4Lmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgIF8weDU1ZjI4NyA9IDB4MDsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAoXzB4Mjk0YTY2ID49IF8weGNkZmRkLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgIF8weDI5NGE2NiA9IDB4MDsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAoXzB4NTAxMDUxID49IF8weDJkODM5MS5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICBfMHg1MDEwNTEgPSAweDA7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaWYgKF8weDI4OWJjMSA+PSBfMHgxZjIwZDAubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgXzB4Mjg5YmMxID0gMHgwOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmIChfMHgxZWNiMmUgPj0gXzB4MmVlNTlhLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgIF8weDFlY2IyZSA9IDB4MDsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAoXzB4NGJlMmVmID49IF8weDJiYWYxYy5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICBfMHg0YmUyZWYgPSAweDA7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaWYgKF8weDRlYWY0ZSA+PSBfMHgzZmNjY2UubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgXzB4NGVhZjRlID0gMHgwOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmICgrK18weDEyMWM1OCA9PT0gXzB4Mjg3ZjE1Lmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgIF8weDEyMWM1OCA9IDB4MDsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwgXzB4MzdkMjgwLnRpbWVyICsgIjAwMCIpOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlICc4JzoKICAgICAgICAgICAgICBfMHgxMjM2YTAuZ2V0KFsidGFyZ2V0SUQiLCAic2hvcnQiLCAnZmlsZTEnLCAndGFyZ2V0SUQyJywgInNob3J0MiIsICJmaWxlMiIsICd0YXJnZXRJRDMnLCAic2hvcnQzIiwgImZpbGUzIiwgJ3RhcmdldElENCcsICJzaG9ydDQiLCAiZmlsZTQiLCAidGFyZ2V0SUQ1IiwgInNob3J0NSIsICdmaWxlNScsICJ0YXJnZXRJRDYiLCAic2hvcnQ2IiwgImZpbGU2IiwgInRhcmdldElENyIsICdzaG9ydDcnLCAiZmlsZTciLCAidGFyZ2V0SUQ4IiwgJ3Nob3J0OCcsICJmaWxlOCIsICd0aW1lciddLCBmdW5jdGlvbiAoXzB4M2I1YTcxLCBfMHgxYTQ0ZjcpIHsKICAgICAgICAgICAgICAgIGlmIChfMHgzYjVhNzEpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIF8weDRhOWJmOShfMHgzYjVhNzEpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgbGV0IF8weDUyNDFhZSA9IF8weDI5ZmE4Zi5yZWFkRmlsZVN5bmMoXzB4MWE0NGY3LmZpbGUxLCAndXRmOCcpLnNwbGl0KCJcbiIpLmZpbHRlcihCb29sZWFuKTsKICAgICAgICAgICAgICAgIGxldCBfMHg5MDMzOGUgPSBfMHgyOWZhOGYucmVhZEZpbGVTeW5jKF8weDFhNDRmNy5maWxlMiwgInV0ZjgiKS5zcGxpdCgiXG4iKS5maWx0ZXIoQm9vbGVhbik7CiAgICAgICAgICAgICAgICBsZXQgXzB4MjhjMzQwID0gXzB4MjlmYThmLnJlYWRGaWxlU3luYyhfMHgxYTQ0ZjcuZmlsZTMsICd1dGY4Jykuc3BsaXQoIlxuIikuZmlsdGVyKEJvb2xlYW4pOwogICAgICAgICAgICAgICAgbGV0IF8weDQ3MTA4NCA9IF8weDI5ZmE4Zi5yZWFkRmlsZVN5bmMoXzB4MWE0NGY3LmZpbGU0LCAidXRmOCIpLnNwbGl0KCJcbiIpLmZpbHRlcihCb29sZWFuKTsKICAgICAgICAgICAgICAgIGxldCBfMHgzNjA0YWUgPSBfMHgyOWZhOGYucmVhZEZpbGVTeW5jKF8weDFhNDRmNy5maWxlNSwgInV0ZjgiKS5zcGxpdCgiXG4iKS5maWx0ZXIoQm9vbGVhbik7CiAgICAgICAgICAgICAgICBsZXQgXzB4YmQxMTA4ID0gXzB4MjlmYThmLnJlYWRGaWxlU3luYyhfMHgxYTQ0ZjcuZmlsZTYsICd1dGY4Jykuc3BsaXQoIlxuIikuZmlsdGVyKEJvb2xlYW4pOwogICAgICAgICAgICAgICAgbGV0IF8weDQ2YWQ1OCA9IF8weDI5ZmE4Zi5yZWFkRmlsZVN5bmMoXzB4MWE0NGY3LmZpbGU3LCAndXRmOCcpLnNwbGl0KCJcbiIpLmZpbHRlcihCb29sZWFuKTsKICAgICAgICAgICAgICAgIGxldCBfMHg0NzgyN2EgPSBfMHgyOWZhOGYucmVhZEZpbGVTeW5jKF8weDFhNDRmNy5maWxlOCwgJ3V0ZjgnKS5zcGxpdCgiXG4iKS5maWx0ZXIoQm9vbGVhbik7CiAgICAgICAgICAgICAgICBsZXQgXzB4NTYzNTE1ID0gMHgwOwogICAgICAgICAgICAgICAgbGV0IF8weDU5MjM4ZSA9IDB4MDsKICAgICAgICAgICAgICAgIGxldCBfMHgzN2U0YTggPSAweDA7CiAgICAgICAgICAgICAgICBsZXQgXzB4MzVmODI5ID0gMHgwOwogICAgICAgICAgICAgICAgbGV0IF8weDJjN2JiMCA9IDB4MDsKICAgICAgICAgICAgICAgIGxldCBfMHgzYjEyNTAgPSAweDA7CiAgICAgICAgICAgICAgICBsZXQgXzB4MTQ4MjJjID0gMHgwOwogICAgICAgICAgICAgICAgbGV0IF8weDNhOTc2ZiA9IDB4MDsKICAgICAgICAgICAgICAgIHNldEludGVydmFsKCgpID0+IHsKICAgICAgICAgICAgICAgICAgbGV0IF8weDhiM2Q2OSA9IF8weDFhNDRmNy5zaG9ydCArIF8weDUyNDFhZVtfMHg1NjM1MTVdOwogICAgICAgICAgICAgICAgICBsZXQgXzB4MmIzOGVhID0gXzB4MWE0NGY3LnNob3J0MiArIF8weDkwMzM4ZVtfMHg1OTIzOGVdOwogICAgICAgICAgICAgICAgICBsZXQgXzB4MzRlZDMxID0gXzB4MWE0NGY3LnNob3J0MyArIF8weDI4YzM0MFtfMHgzN2U0YThdOwogICAgICAgICAgICAgICAgICBsZXQgXzB4NDEyNzM5ID0gXzB4MWE0NGY3LnNob3J0NCArIF8weDQ3MTA4NFtfMHgzNWY4MjldOwogICAgICAgICAgICAgICAgICBsZXQgXzB4NGI4ZjI4ID0gXzB4MWE0NGY3LnNob3J0NSArIF8weDM2MDRhZVtfMHgyYzdiYjBdOwogICAgICAgICAgICAgICAgICBsZXQgXzB4MjExMDFkID0gXzB4MWE0NGY3LnNob3J0NiArIF8weGJkMTEwOFtfMHgzYjEyNTBdOwogICAgICAgICAgICAgICAgICBsZXQgXzB4MmViNzMxID0gXzB4MWE0NGY3LnNob3J0NyArIF8weDQ2YWQ1OFtfMHgxNDgyMmNdOwogICAgICAgICAgICAgICAgICBsZXQgXzB4MWMxODQ2ID0gXzB4MWE0NGY3LnNob3J0OCArIF8weDQ3ODI3YVtfMHgzYTk3NmZdOwogICAgICAgICAgICAgICAgICBfMHgyODdmMTVbXzB4MTIxYzU4XS5zZW5kTWVzc2FnZShfMHg4YjNkNjksIF8weDFhNDRmNy50YXJnZXRJRCwgKCkgPT4ge30pOwogICAgICAgICAgICAgICAgICBfMHgyODdmMTVbXzB4MTIxYzU4XS5zZW5kTWVzc2FnZShfMHgyYjM4ZWEsIF8weDFhNDRmNy50YXJnZXRJRDIsICgpID0+IHt9KTsKICAgICAgICAgICAgICAgICAgXzB4Mjg3ZjE1W18weDEyMWM1OF0uc2VuZE1lc3NhZ2UoXzB4MzRlZDMxLCBfMHgxYTQ0ZjcudGFyZ2V0SUQzLCAoKSA9PiB7fSk7CiAgICAgICAgICAgICAgICAgIF8weDI4N2YxNVtfMHgxMjFjNThdLnNlbmRNZXNzYWdlKF8weDQxMjczOSwgXzB4MWE0NGY3LnRhcmdldElENCwgKCkgPT4ge30pOwogICAgICAgICAgICAgICAgICBfMHgyODdmMTVbXzB4MTIxYzU4XS5zZW5kTWVzc2FnZShfMHg0YjhmMjgsIF8weDFhNDRmNy50YXJnZXRJRDUsICgpID0+IHt9KTsKICAgICAgICAgICAgICAgICAgXzB4Mjg3ZjE1W18weDEyMWM1OF0uc2VuZE1lc3NhZ2UoXzB4MjExMDFkLCBfMHgxYTQ0ZjcudGFyZ2V0SUQ2LCAoKSA9PiB7fSk7CiAgICAgICAgICAgICAgICAgIF8weDI4N2YxNVtfMHgxMjFjNThdLnNlbmRNZXNzYWdlKF8weDJlYjczMSwgXzB4MWE0NGY3LnRhcmdldElENywgKCkgPT4ge30pOwogICAgICAgICAgICAgICAgICBfMHgyODdmMTVbXzB4MTIxYzU4XS5zZW5kTWVzc2FnZShfMHgxYzE4NDYsIF8weDFhNDRmNy50YXJnZXRJRDgsICgpID0+IHt9KTsKICAgICAgICAgICAgICAgICAgXzB4NTYzNTE1Kys7CiAgICAgICAgICAgICAgICAgIF8weDU5MjM4ZSsrOwogICAgICAgICAgICAgICAgICBfMHgzN2U0YTgrKzsKICAgICAgICAgICAgICAgICAgXzB4MzVmODI5Kys7CiAgICAgICAgICAgICAgICAgIF8weDJjN2JiMCsrOwogICAgICAgICAgICAgICAgICBfMHgzYjEyNTArKzsKICAgICAgICAgICAgICAgICAgXzB4MTQ4MjJjKys7CiAgICAgICAgICAgICAgICAgIF8weDNhOTc2ZisrOwogICAgICAgICAgICAgICAgICBpZiAoXzB4NTYzNTE1ID49IF8weDUyNDFhZS5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICBfMHg1NjM1MTUgPSAweDA7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaWYgKF8weDU5MjM4ZSA+PSBfMHg5MDMzOGUubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgXzB4NTkyMzhlID0gMHgwOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmIChfMHgzN2U0YTggPj0gXzB4MjhjMzQwLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgIF8weDM3ZTRhOCA9IDB4MDsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAoXzB4MzVmODI5ID49IF8weDQ3MTA4NC5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICBfMHgzNWY4MjkgPSAweDA7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaWYgKF8weDJjN2JiMCA+PSBfMHgzNjA0YWUubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgXzB4MmM3YmIwID0gMHgwOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmIChfMHgzYjEyNTAgPj0gXzB4YmQxMTA4Lmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgIF8weDNiMTI1MCA9IDB4MDsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAoXzB4MTQ4MjJjID49IF8weDQ2YWQ1OC5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICBfMHgxNDgyMmMgPSAweDA7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaWYgKF8weDNhOTc2ZiA+PSBfMHg0NzgyN2EubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgXzB4M2E5NzZmID0gMHgwOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmICgrK18weDEyMWM1OCA9PT0gXzB4Mjg3ZjE1Lmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgIF8weDEyMWM1OCA9IDB4MDsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwgXzB4MWE0NGY3LnRpbWVyICsgJzAwMCcpOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlICc5JzoKICAgICAgICAgICAgICBfMHgxMjM2YTAuZ2V0KFsidGFyZ2V0SUQiLCAic2hvcnQiLCAiZmlsZTEiLCAidGFyZ2V0SUQyIiwgInNob3J0MiIsICdmaWxlMicsICJ0YXJnZXRJRDMiLCAic2hvcnQzIiwgImZpbGUzIiwgJ3RhcmdldElENCcsICdzaG9ydDQnLCAiZmlsZTQiLCAndGFyZ2V0SUQ1JywgJ3Nob3J0NScsICJmaWxlNSIsICJ0YXJnZXRJRDYiLCAic2hvcnQ2IiwgImZpbGU2IiwgInRhcmdldElENyIsICJzaG9ydDciLCAnZmlsZTcnLCAidGFyZ2V0SUQ4IiwgJ3Nob3J0OCcsICdmaWxlOCcsICJ0YXJnZXRJRDkiLCAic2hvcnQ5IiwgImZpbGU5IiwgJ3RpbWVyJ10sIGZ1bmN0aW9uIChfMHhmY2MwYjMsIF8weDRiMGY0ZikgewogICAgICAgICAgICAgICAgaWYgKF8weGZjYzBiMykgewogICAgICAgICAgICAgICAgICByZXR1cm4gXzB4NGE5YmY5KF8weGZjYzBiMyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBsZXQgXzB4NDA2MTZjID0gXzB4MjlmYThmLnJlYWRGaWxlU3luYyhfMHg0YjBmNGYuZmlsZTEsICJ1dGY4Iikuc3BsaXQoIlxuIikuZmlsdGVyKEJvb2xlYW4pOwogICAgICAgICAgICAgICAgbGV0IF8weDE5NDY3NyA9IF8weDI5ZmE4Zi5yZWFkRmlsZVN5bmMoXzB4NGIwZjRmLmZpbGUyLCAndXRmOCcpLnNwbGl0KCJcbiIpLmZpbHRlcihCb29sZWFuKTsKICAgICAgICAgICAgICAgIGxldCBfMHhjNjVhMzcgPSBfMHgyOWZhOGYucmVhZEZpbGVTeW5jKF8weDRiMGY0Zi5maWxlMywgJ3V0ZjgnKS5zcGxpdCgiXG4iKS5maWx0ZXIoQm9vbGVhbik7CiAgICAgICAgICAgICAgICBsZXQgXzB4MWJlYzJjID0gXzB4MjlmYThmLnJlYWRGaWxlU3luYyhfMHg0YjBmNGYuZmlsZTQsICJ1dGY4Iikuc3BsaXQoIlxuIikuZmlsdGVyKEJvb2xlYW4pOwogICAgICAgICAgICAgICAgbGV0IF8weDNkYThiNSA9IF8weDI5ZmE4Zi5yZWFkRmlsZVN5bmMoXzB4NGIwZjRmLmZpbGU1LCAndXRmOCcpLnNwbGl0KCJcbiIpLmZpbHRlcihCb29sZWFuKTsKICAgICAgICAgICAgICAgIGxldCBfMHgxOTJlNmQgPSBfMHgyOWZhOGYucmVhZEZpbGVTeW5jKF8weDRiMGY0Zi5maWxlNiwgInV0ZjgiKS5zcGxpdCgiXG4iKS5maWx0ZXIoQm9vbGVhbik7CiAgICAgICAgICAgICAgICBsZXQgXzB4NThhMDliID0gXzB4MjlmYThmLnJlYWRGaWxlU3luYyhfMHg0YjBmNGYuZmlsZTcsICJ1dGY4Iikuc3BsaXQoIlxuIikuZmlsdGVyKEJvb2xlYW4pOwogICAgICAgICAgICAgICAgbGV0IF8weDU3YzA3MiA9IF8weDI5ZmE4Zi5yZWFkRmlsZVN5bmMoXzB4NGIwZjRmLmZpbGU4LCAidXRmOCIpLnNwbGl0KCJcbiIpLmZpbHRlcihCb29sZWFuKTsKICAgICAgICAgICAgICAgIGxldCBfMHg1Yzg3OGQgPSBfMHgyOWZhOGYucmVhZEZpbGVTeW5jKF8weDRiMGY0Zi5maWxlOSwgJ3V0ZjgnKS5zcGxpdCgiXG4iKS5maWx0ZXIoQm9vbGVhbik7CiAgICAgICAgICAgICAgICBsZXQgXzB4M2JhNTFlID0gMHgwOwogICAgICAgICAgICAgICAgbGV0IF8weDNlYmJkYyA9IDB4MDsKICAgICAgICAgICAgICAgIGxldCBfMHgxZTc3MjYgPSAweDA7CiAgICAgICAgICAgICAgICBsZXQgXzB4MmJlNmMzID0gMHgwOwogICAgICAgICAgICAgICAgbGV0IF8weDU0ZWM1ZSA9IDB4MDsKICAgICAgICAgICAgICAgIGxldCBfMHgxZjY1OGQgPSAweDA7CiAgICAgICAgICAgICAgICBsZXQgXzB4MTRjZjZiID0gMHgwOwogICAgICAgICAgICAgICAgbGV0IF8weDUyN2M0NSA9IDB4MDsKICAgICAgICAgICAgICAgIGxldCBfMHgxZGNjODYgPSAweDA7CiAgICAgICAgICAgICAgICBzZXRJbnRlcnZhbCgoKSA9PiB7CiAgICAgICAgICAgICAgICAgIGxldCBfMHg1NTRjYjQgPSBfMHg0YjBmNGYuc2hvcnQgKyBfMHg0MDYxNmNbXzB4M2JhNTFlXTsKICAgICAgICAgICAgICAgICAgbGV0IF8weDE3NWZlZSA9IF8weDRiMGY0Zi5zaG9ydDIgKyBfMHgxOTQ2NzdbXzB4M2ViYmRjXTsKICAgICAgICAgICAgICAgICAgbGV0IF8weDJkNTliMCA9IF8weDRiMGY0Zi5zaG9ydDMgKyBfMHhjNjVhMzdbXzB4MWU3NzI2XTsKICAgICAgICAgICAgICAgICAgbGV0IF8weDQ3NWFjNCA9IF8weDRiMGY0Zi5zaG9ydDQgKyBfMHgxYmVjMmNbXzB4MmJlNmMzXTsKICAgICAgICAgICAgICAgICAgbGV0IF8weDMwZmZhZiA9IF8weDRiMGY0Zi5zaG9ydDUgKyBfMHgzZGE4YjVbXzB4NTRlYzVlXTsKICAgICAgICAgICAgICAgICAgbGV0IF8weDM4NWNkYiA9IF8weDRiMGY0Zi5zaG9ydDYgKyBfMHgxOTJlNmRbXzB4MWY2NThkXTsKICAgICAgICAgICAgICAgICAgbGV0IF8weDNmZjM1MSA9IF8weDRiMGY0Zi5zaG9ydDcgKyBfMHg1OGEwOWJbXzB4MTRjZjZiXTsKICAgICAgICAgICAgICAgICAgbGV0IF8weDFmOTQzMiA9IF8weDRiMGY0Zi5zaG9ydDggKyBfMHg1N2MwNzJbXzB4NTI3YzQ1XTsKICAgICAgICAgICAgICAgICAgbGV0IF8weDQwZGRiMSA9IF8weDRiMGY0Zi5zaG9ydDkgKyBfMHg1Yzg3OGRbXzB4MWRjYzg2XTsKICAgICAgICAgICAgICAgICAgXzB4Mjg3ZjE1W18weDEyMWM1OF0uc2VuZE1lc3NhZ2UoXzB4NTU0Y2I0LCBfMHg0YjBmNGYudGFyZ2V0SUQsICgpID0+IHt9KTsKICAgICAgICAgICAgICAgICAgXzB4Mjg3ZjE1W18weDEyMWM1OF0uc2VuZE1lc3NhZ2UoXzB4MTc1ZmVlLCBfMHg0YjBmNGYudGFyZ2V0SUQyLCAoKSA9PiB7fSk7CiAgICAgICAgICAgICAgICAgIF8weDI4N2YxNVtfMHgxMjFjNThdLnNlbmRNZXNzYWdlKF8weDJkNTliMCwgXzB4NGIwZjRmLnRhcmdldElEMywgKCkgPT4ge30pOwogICAgICAgICAgICAgICAgICBfMHgyODdmMTVbXzB4MTIxYzU4XS5zZW5kTWVzc2FnZShfMHg0NzVhYzQsIF8weDRiMGY0Zi50YXJnZXRJRDQsICgpID0+IHt9KTsKICAgICAgICAgICAgICAgICAgXzB4Mjg3ZjE1W18weDEyMWM1OF0uc2VuZE1lc3NhZ2UoXzB4MzBmZmFmLCBfMHg0YjBmNGYudGFyZ2V0SUQ1LCAoKSA9PiB7fSk7CiAgICAgICAgICAgICAgICAgIF8weDI4N2YxNVtfMHgxMjFjNThdLnNlbmRNZXNzYWdlKF8weDM4NWNkYiwgXzB4NGIwZjRmLnRhcmdldElENiwgKCkgPT4ge30pOwogICAgICAgICAgICAgICAgICBfMHgyODdmMTVbXzB4MTIxYzU4XS5zZW5kTWVzc2FnZShfMHgzZmYzNTEsIF8weDRiMGY0Zi50YXJnZXRJRDcsICgpID0+IHt9KTsKICAgICAgICAgICAgICAgICAgXzB4Mjg3ZjE1W18weDEyMWM1OF0uc2VuZE1lc3NhZ2UoXzB4MWY5NDMyLCBfMHg0YjBmNGYudGFyZ2V0SUQ4LCAoKSA9PiB7fSk7CiAgICAgICAgICAgICAgICAgIF8weDI4N2YxNVtfMHgxMjFjNThdLnNlbmRNZXNzYWdlKF8weDQwZGRiMSwgXzB4NGIwZjRmLnRhcmdldElEOSwgKCkgPT4ge30pOwogICAgICAgICAgICAgICAgICBfMHgzYmE1MWUrKzsKICAgICAgICAgICAgICAgICAgXzB4M2ViYmRjKys7CiAgICAgICAgICAgICAgICAgIF8weDFlNzcyNisrOwogICAgICAgICAgICAgICAgICBfMHgyYmU2YzMrKzsKICAgICAgICAgICAgICAgICAgXzB4NTRlYzVlKys7CiAgICAgICAgICAgICAgICAgIF8weDFmNjU4ZCsrOwogICAgICAgICAgICAgICAgICBfMHgxNGNmNmIrKzsKICAgICAgICAgICAgICAgICAgXzB4NTI3YzQ1Kys7CiAgICAgICAgICAgICAgICAgIF8weDFkY2M4NisrOwogICAgICAgICAgICAgICAgICBpZiAoXzB4M2JhNTFlID49IF8weDQwNjE2Yy5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICBfMHgzYmE1MWUgPSAweDA7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaWYgKF8weDNlYmJkYyA+PSBfMHgxOTQ2NzcubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgXzB4M2ViYmRjID0gMHgwOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmIChfMHgxZTc3MjYgPj0gXzB4YzY1YTM3Lmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgIF8weDFlNzcyNiA9IDB4MDsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAoXzB4MmJlNmMzID49IF8weDFiZWMyYy5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICBfMHgyYmU2YzMgPSAweDA7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaWYgKF8weDU0ZWM1ZSA+PSBfMHgzZGE4YjUubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgXzB4NTRlYzVlID0gMHgwOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmIChfMHgxZjY1OGQgPj0gXzB4MTkyZTZkLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgIF8weDFmNjU4ZCA9IDB4MDsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAoXzB4MTRjZjZiID49IF8weDU4YTA5Yi5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICBfMHgxNGNmNmIgPSAweDA7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaWYgKF8weDUyN2M0NSA+PSBfMHg1N2MwNzIubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgXzB4NTI3YzQ1ID0gMHgwOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmIChfMHgxZGNjODYgPj0gXzB4NWM4NzhkLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgIF8weDFkY2M4NiA9IDB4MDsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAoKytfMHgxMjFjNTggPT09IF8weDI4N2YxNS5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICBfMHgxMjFjNTggPSAweDA7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sIF8weDRiMGY0Zi50aW1lciArICIwMDAiKTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSAnMTAnOgogICAgICAgICAgICAgIF8weDEyMzZhMC5nZXQoWyJ0YXJnZXRJRCIsICJzaG9ydCIsICdmaWxlMScsICJ0YXJnZXRJRDIiLCAic2hvcnQyIiwgImZpbGUyIiwgJ3RhcmdldElEMycsICJzaG9ydDMiLCAnZmlsZTMnLCAidGFyZ2V0SUQ0IiwgJ3Nob3J0NCcsICJmaWxlNCIsICJ0YXJnZXRJRDUiLCAic2hvcnQ1IiwgImZpbGU1IiwgInRhcmdldElENiIsICJzaG9ydDYiLCAiZmlsZTYiLCAidGFyZ2V0SUQ3IiwgInNob3J0NyIsICdmaWxlNycsICJ0YXJnZXRJRDgiLCAic2hvcnQ4IiwgImZpbGU4IiwgInRhcmdldElEOSIsICJzaG9ydDkiLCAiZmlsZTkiLCAidGFyZ2V0SUQxMCIsICdzaG9ydDEwJywgImZpbGUxMCIsICd0aW1lciddLCBmdW5jdGlvbiAoXzB4MTg1YmVhLCBfMHg1MGJhZTcpIHsKICAgICAgICAgICAgICAgIGlmIChfMHgxODViZWEpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIF8weDRhOWJmOShfMHgxODViZWEpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgbGV0IF8weDRkNDg5YSA9IF8weDI5ZmE4Zi5yZWFkRmlsZVN5bmMoXzB4NTBiYWU3LmZpbGUxLCAidXRmOCIpLnNwbGl0KCJcbiIpLmZpbHRlcihCb29sZWFuKTsKICAgICAgICAgICAgICAgIGxldCBfMHg1ODRhZTIgPSBfMHgyOWZhOGYucmVhZEZpbGVTeW5jKF8weDUwYmFlNy5maWxlMiwgInV0ZjgiKS5zcGxpdCgiXG4iKS5maWx0ZXIoQm9vbGVhbik7CiAgICAgICAgICAgICAgICBsZXQgXzB4MzgyODYyID0gXzB4MjlmYThmLnJlYWRGaWxlU3luYyhfMHg1MGJhZTcuZmlsZTMsICd1dGY4Jykuc3BsaXQoIlxuIikuZmlsdGVyKEJvb2xlYW4pOwogICAgICAgICAgICAgICAgbGV0IF8weDE3NmU1YiA9IF8weDI5ZmE4Zi5yZWFkRmlsZVN5bmMoXzB4NTBiYWU3LmZpbGU0LCAidXRmOCIpLnNwbGl0KCJcbiIpLmZpbHRlcihCb29sZWFuKTsKICAgICAgICAgICAgICAgIGxldCBfMHhjNmMzNzkgPSBfMHgyOWZhOGYucmVhZEZpbGVTeW5jKF8weDUwYmFlNy5maWxlNSwgInV0ZjgiKS5zcGxpdCgiXG4iKS5maWx0ZXIoQm9vbGVhbik7CiAgICAgICAgICAgICAgICBsZXQgXzB4NDljY2IyID0gXzB4MjlmYThmLnJlYWRGaWxlU3luYyhfMHg1MGJhZTcuZmlsZTYsICJ1dGY4Iikuc3BsaXQoIlxuIikuZmlsdGVyKEJvb2xlYW4pOwogICAgICAgICAgICAgICAgbGV0IF8weDVjZmRmNCA9IF8weDI5ZmE4Zi5yZWFkRmlsZVN5bmMoXzB4NTBiYWU3LmZpbGU3LCAndXRmOCcpLnNwbGl0KCJcbiIpLmZpbHRlcihCb29sZWFuKTsKICAgICAgICAgICAgICAgIGxldCBfMHgzY2ExN2MgPSBfMHgyOWZhOGYucmVhZEZpbGVTeW5jKF8weDUwYmFlNy5maWxlOCwgJ3V0ZjgnKS5zcGxpdCgiXG4iKS5maWx0ZXIoQm9vbGVhbik7CiAgICAgICAgICAgICAgICBsZXQgXzB4MjVjMzE2ID0gXzB4MjlmYThmLnJlYWRGaWxlU3luYyhfMHg1MGJhZTcuZmlsZTksICJ1dGY4Iikuc3BsaXQoIlxuIikuZmlsdGVyKEJvb2xlYW4pOwogICAgICAgICAgICAgICAgbGV0IF8weDQ5M2FjMSA9IF8weDI5ZmE4Zi5yZWFkRmlsZVN5bmMoXzB4NTBiYWU3LmZpbGUxMCwgJ3V0ZjgnKS5zcGxpdCgiXG4iKS5maWx0ZXIoQm9vbGVhbik7CiAgICAgICAgICAgICAgICBsZXQgXzB4NTIwYTdkID0gMHgwOwogICAgICAgICAgICAgICAgbGV0IF8weGNlNDExID0gMHgwOwogICAgICAgICAgICAgICAgbGV0IF8weDU1MWE1MCA9IDB4MDsKICAgICAgICAgICAgICAgIGxldCBfMHg1ZGVmNDkgPSAweDA7CiAgICAgICAgICAgICAgICBsZXQgXzB4NDQ5MjI0ID0gMHgwOwogICAgICAgICAgICAgICAgbGV0IF8weDEwZDNlMCA9IDB4MDsKICAgICAgICAgICAgICAgIGxldCBfMHgxN2RhYzcgPSAweDA7CiAgICAgICAgICAgICAgICBsZXQgXzB4NDhhNmI2ID0gMHgwOwogICAgICAgICAgICAgICAgbGV0IF8weDU0YTgxMCA9IDB4MDsKICAgICAgICAgICAgICAgIGxldCBfMHgyZmFiYzkgPSAweDA7CiAgICAgICAgICAgICAgICBzZXRJbnRlcnZhbCgoKSA9PiB7CiAgICAgICAgICAgICAgICAgIGxldCBfMHhlYjcwZjkgPSBfMHg1MGJhZTcuc2hvcnQgKyBfMHg0ZDQ4OWFbXzB4NTIwYTdkXTsKICAgICAgICAgICAgICAgICAgbGV0IF8weDU3Yjg1NiA9IF8weDUwYmFlNy5zaG9ydDIgKyBfMHg1ODRhZTJbXzB4Y2U0MTFdOwogICAgICAgICAgICAgICAgICBsZXQgXzB4MjFhZDUxID0gXzB4NTBiYWU3LnNob3J0MyArIF8weDM4Mjg2MltfMHg1NTFhNTBdOwogICAgICAgICAgICAgICAgICBsZXQgXzB4NTgyMmMzID0gXzB4NTBiYWU3LnNob3J0NCArIF8weDE3NmU1YltfMHg1ZGVmNDldOwogICAgICAgICAgICAgICAgICBsZXQgXzB4MmMyZDQ4ID0gXzB4NTBiYWU3LnNob3J0NSArIF8weGM2YzM3OVtfMHg0NDkyMjRdOwogICAgICAgICAgICAgICAgICBsZXQgXzB4MTdkYzMxID0gXzB4NTBiYWU3LnNob3J0NiArIF8weDQ5Y2NiMltfMHgxMGQzZTBdOwogICAgICAgICAgICAgICAgICBsZXQgXzB4MmI1YmFlID0gXzB4NTBiYWU3LnNob3J0NyArIF8weDVjZmRmNFtfMHgxN2RhYzddOwogICAgICAgICAgICAgICAgICBsZXQgXzB4NTZjOTVjID0gXzB4NTBiYWU3LnNob3J0OCArIF8weDNjYTE3Y1tfMHg0OGE2YjZdOwogICAgICAgICAgICAgICAgICBsZXQgXzB4Y2NkYWFkID0gXzB4NTBiYWU3LnNob3J0OSArIF8weDI1YzMxNltfMHg1NGE4MTBdOwogICAgICAgICAgICAgICAgICBsZXQgXzB4M2FlYmNkID0gXzB4NTBiYWU3LnNob3J0MTAgKyBfMHg0OTNhYzFbXzB4MmZhYmM5XTsKICAgICAgICAgICAgICAgICAgXzB4Mjg3ZjE1W18weDEyMWM1OF0uc2VuZE1lc3NhZ2UoXzB4ZWI3MGY5LCBfMHg1MGJhZTcudGFyZ2V0SUQsICgpID0+IHt9KTsKICAgICAgICAgICAgICAgICAgXzB4Mjg3ZjE1W18weDEyMWM1OF0uc2VuZE1lc3NhZ2UoXzB4NTdiODU2LCBfMHg1MGJhZTcudGFyZ2V0SUQyLCAoKSA9PiB7fSk7CiAgICAgICAgICAgICAgICAgIF8weDI4N2YxNVtfMHgxMjFjNThdLnNlbmRNZXNzYWdlKF8weDIxYWQ1MSwgXzB4NTBiYWU3LnRhcmdldElEMywgKCkgPT4ge30pOwogICAgICAgICAgICAgICAgICBfMHgyODdmMTVbXzB4MTIxYzU4XS5zZW5kTWVzc2FnZShfMHg1ODIyYzMsIF8weDUwYmFlNy50YXJnZXRJRDQsICgpID0+IHt9KTsKICAgICAgICAgICAgICAgICAgXzB4Mjg3ZjE1W18weDEyMWM1OF0uc2VuZE1lc3NhZ2UoXzB4MmMyZDQ4LCBfMHg1MGJhZTcudGFyZ2V0SUQ1LCAoKSA9PiB7fSk7CiAgICAgICAgICAgICAgICAgIF8weDI4N2YxNVtfMHgxMjFjNThdLnNlbmRNZXNzYWdlKF8weDE3ZGMzMSwgXzB4NTBiYWU3LnRhcmdldElENiwgKCkgPT4ge30pOwogICAgICAgICAgICAgICAgICBfMHgyODdmMTVbXzB4MTIxYzU4XS5zZW5kTWVzc2FnZShfMHgyYjViYWUsIF8weDUwYmFlNy50YXJnZXRJRDcsICgpID0+IHt9KTsKICAgICAgICAgICAgICAgICAgXzB4Mjg3ZjE1W18weDEyMWM1OF0uc2VuZE1lc3NhZ2UoXzB4NTZjOTVjLCBfMHg1MGJhZTcudGFyZ2V0SUQ4LCAoKSA9PiB7fSk7CiAgICAgICAgICAgICAgICAgIF8weDI4N2YxNVtfMHgxMjFjNThdLnNlbmRNZXNzYWdlKF8weGNjZGFhZCwgXzB4NTBiYWU3LnRhcmdldElEOSwgKCkgPT4ge30pOwogICAgICAgICAgICAgICAgICBfMHgyODdmMTVbXzB4MTIxYzU4XS5zZW5kTWVzc2FnZShfMHgzYWViY2QsIF8weDUwYmFlNy50YXJnZXRJRDEwLCAoKSA9PiB7fSk7CiAgICAgICAgICAgICAgICAgIF8weDUyMGE3ZCsrOwogICAgICAgICAgICAgICAgICBfMHhjZTQxMSsrOwogICAgICAgICAgICAgICAgICBfMHg1NTFhNTArKzsKICAgICAgICAgICAgICAgICAgXzB4NWRlZjQ5Kys7CiAgICAgICAgICAgICAgICAgIF8weDQ0OTIyNCsrOwogICAgICAgICAgICAgICAgICBfMHgxMGQzZTArKzsKICAgICAgICAgICAgICAgICAgXzB4MTdkYWM3Kys7CiAgICAgICAgICAgICAgICAgIF8weDQ4YTZiNisrOwogICAgICAgICAgICAgICAgICBfMHg1NGE4MTArKzsKICAgICAgICAgICAgICAgICAgXzB4MmZhYmM5Kys7CiAgICAgICAgICAgICAgICAgIGlmIChfMHg1MjBhN2QgPj0gXzB4NGQ0ODlhLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgIF8weDUyMGE3ZCA9IDB4MDsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAoXzB4Y2U0MTEgPj0gXzB4NTg0YWUyLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgIF8weGNlNDExID0gMHgwOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmIChfMHg1NTFhNTAgPj0gXzB4MzgyODYyLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgIF8weDU1MWE1MCA9IDB4MDsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAoXzB4NWRlZjQ5ID49IF8weDE3NmU1Yi5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICBfMHg1ZGVmNDkgPSAweDA7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaWYgKF8weDQ0OTIyNCA+PSBfMHhjNmMzNzkubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgXzB4NDQ5MjI0ID0gMHgwOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmIChfMHgxMGQzZTAgPj0gXzB4NDljY2IyLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgIF8weDEwZDNlMCA9IDB4MDsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAoXzB4MTdkYWM3ID49IF8weDVjZmRmNC5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICBfMHgxN2RhYzcgPSAweDA7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaWYgKF8weDQ4YTZiNiA+PSBfMHgzY2ExN2MubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgXzB4NDhhNmI2ID0gMHgwOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmIChfMHg1NGE4MTAgPj0gXzB4MjVjMzE2Lmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgIF8weDU0YTgxMCA9IDB4MDsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAoXzB4MmZhYmM5ID49IF8weDQ5M2FjMS5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICBfMHgyZmFiYzkgPSAweDA7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaWYgKCsrXzB4MTIxYzU4ID09PSBfMHgyODdmMTUubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgXzB4MTIxYzU4ID0gMHgwOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LCBfMHg1MGJhZTcudGltZXIgKyAnMDAwJyk7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgJzExJzoKICAgICAgICAgICAgICBfMHgxMjM2YTAuZ2V0KFsidGFyZ2V0SUQiLCAic2hvcnQiLCAiZmlsZTEiLCAidGFyZ2V0SUQyIiwgJ3Nob3J0MicsICdmaWxlMicsICd0YXJnZXRJRDMnLCAic2hvcnQzIiwgImZpbGUzIiwgInRhcmdldElENCIsICdzaG9ydDQnLCAnZmlsZTQnLCAidGFyZ2V0SUQ1IiwgInNob3J0NSIsICdmaWxlNScsICJ0YXJnZXRJRDYiLCAnc2hvcnQ2JywgJ2ZpbGU2JywgJ3RhcmdldElENycsICJzaG9ydDciLCAiZmlsZTciLCAndGFyZ2V0SUQ4JywgJ3Nob3J0OCcsICJmaWxlOCIsICJ0YXJnZXRJRDkiLCAic2hvcnQ5IiwgImZpbGU5IiwgInRhcmdldElEMTAiLCAic2hvcnQxMCIsICJmaWxlMTAiLCAidGFyZ2V0SUQxMSIsICJzaG9ydDExIiwgJ2ZpbGUxMScsICJ0aW1lciJdLCBmdW5jdGlvbiAoXzB4NTY4Yjg2LCBfMHg1MDQ3MTcpIHsKICAgICAgICAgICAgICAgIGlmIChfMHg1NjhiODYpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIF8weDRhOWJmOShfMHg1NjhiODYpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgbGV0IF8weDFmZGRmNCA9IF8weDI5ZmE4Zi5yZWFkRmlsZVN5bmMoXzB4NTA0NzE3LmZpbGUxLCAndXRmOCcpLnNwbGl0KCJcbiIpLmZpbHRlcihCb29sZWFuKTsKICAgICAgICAgICAgICAgIGxldCBfMHgxOTAxN2QgPSBfMHgyOWZhOGYucmVhZEZpbGVTeW5jKF8weDUwNDcxNy5maWxlMiwgInV0ZjgiKS5zcGxpdCgiXG4iKS5maWx0ZXIoQm9vbGVhbik7CiAgICAgICAgICAgICAgICBsZXQgXzB4M2RhNzNiID0gXzB4MjlmYThmLnJlYWRGaWxlU3luYyhfMHg1MDQ3MTcuZmlsZTMsICd1dGY4Jykuc3BsaXQoIlxuIikuZmlsdGVyKEJvb2xlYW4pOwogICAgICAgICAgICAgICAgbGV0IF8weDE4NjRmZiA9IF8weDI5ZmE4Zi5yZWFkRmlsZVN5bmMoXzB4NTA0NzE3LmZpbGU0LCAidXRmOCIpLnNwbGl0KCJcbiIpLmZpbHRlcihCb29sZWFuKTsKICAgICAgICAgICAgICAgIGxldCBfMHg0ZGY3OGIgPSBfMHgyOWZhOGYucmVhZEZpbGVTeW5jKF8weDUwNDcxNy5maWxlNSwgInV0ZjgiKS5zcGxpdCgiXG4iKS5maWx0ZXIoQm9vbGVhbik7CiAgICAgICAgICAgICAgICBsZXQgXzB4MmYzY2YyID0gXzB4MjlmYThmLnJlYWRGaWxlU3luYyhfMHg1MDQ3MTcuZmlsZTYsICd1dGY4Jykuc3BsaXQoIlxuIikuZmlsdGVyKEJvb2xlYW4pOwogICAgICAgICAgICAgICAgbGV0IF8weDQwM2NhNyA9IF8weDI5ZmE4Zi5yZWFkRmlsZVN5bmMoXzB4NTA0NzE3LmZpbGU3LCAndXRmOCcpLnNwbGl0KCJcbiIpLmZpbHRlcihCb29sZWFuKTsKICAgICAgICAgICAgICAgIGxldCBfMHg0NDc2MGIgPSBfMHgyOWZhOGYucmVhZEZpbGVTeW5jKF8weDUwNDcxNy5maWxlOCwgInV0ZjgiKS5zcGxpdCgiXG4iKS5maWx0ZXIoQm9vbGVhbik7CiAgICAgICAgICAgICAgICBsZXQgXzB4MWFlOWE1ID0gXzB4MjlmYThmLnJlYWRGaWxlU3luYyhfMHg1MDQ3MTcuZmlsZTksICJ1dGY4Iikuc3BsaXQoIlxuIikuZmlsdGVyKEJvb2xlYW4pOwogICAgICAgICAgICAgICAgbGV0IF8weDI0YTZjOCA9IF8weDI5ZmE4Zi5yZWFkRmlsZVN5bmMoXzB4NTA0NzE3LmZpbGUxMCwgInV0ZjgiKS5zcGxpdCgiXG4iKS5maWx0ZXIoQm9vbGVhbik7CiAgICAgICAgICAgICAgICBsZXQgXzB4NWNlZTQwID0gXzB4MjlmYThmLnJlYWRGaWxlU3luYyhfMHg1MDQ3MTcuZmlsZTExLCAidXRmOCIpLnNwbGl0KCJcbiIpLmZpbHRlcihCb29sZWFuKTsKICAgICAgICAgICAgICAgIGxldCBfMHg0N2YxZmMgPSAweDA7CiAgICAgICAgICAgICAgICBsZXQgXzB4M2E1MjkwID0gMHgwOwogICAgICAgICAgICAgICAgbGV0IF8weDFjMGQ5ZCA9IDB4MDsKICAgICAgICAgICAgICAgIGxldCBfMHgxZWQxNmYgPSAweDA7CiAgICAgICAgICAgICAgICBsZXQgXzB4MmRiNzY3ID0gMHgwOwogICAgICAgICAgICAgICAgbGV0IF8weGIxY2JjMiA9IDB4MDsKICAgICAgICAgICAgICAgIGxldCBfMHg0ODI2MmUgPSAweDA7CiAgICAgICAgICAgICAgICBsZXQgXzB4Mzc1NGE0ID0gMHgwOwogICAgICAgICAgICAgICAgbGV0IF8weDVjNzNiYSA9IDB4MDsKICAgICAgICAgICAgICAgIGxldCBfMHgxOGYzMWUgPSAweDA7CiAgICAgICAgICAgICAgICBsZXQgXzB4M2E1ZTNlID0gMHgwOwogICAgICAgICAgICAgICAgc2V0SW50ZXJ2YWwoKCkgPT4gewogICAgICAgICAgICAgICAgICBsZXQgXzB4NGZiYzFmID0gXzB4NTA0NzE3LnNob3J0ICsgXzB4MWZkZGY0W18weDQ3ZjFmY107CiAgICAgICAgICAgICAgICAgIGxldCBfMHg1OTk0MjkgPSBfMHg1MDQ3MTcuc2hvcnQyICsgXzB4MTkwMTdkW18weDNhNTI5MF07CiAgICAgICAgICAgICAgICAgIGxldCBfMHgxZDc1MzYgPSBfMHg1MDQ3MTcuc2hvcnQzICsgXzB4M2RhNzNiW18weDFjMGQ5ZF07CiAgICAgICAgICAgICAgICAgIGxldCBfMHgyZjUzNDMgPSBfMHg1MDQ3MTcuc2hvcnQ0ICsgXzB4MTg2NGZmW18weDFlZDE2Zl07CiAgICAgICAgICAgICAgICAgIGxldCBfMHgxZTQwMDMgPSBfMHg1MDQ3MTcuc2hvcnQ1ICsgXzB4NGRmNzhiW18weDJkYjc2N107CiAgICAgICAgICAgICAgICAgIGxldCBfMHgzOWI5NmEgPSBfMHg1MDQ3MTcuc2hvcnQ2ICsgXzB4MmYzY2YyW18weGIxY2JjMl07CiAgICAgICAgICAgICAgICAgIGxldCBfMHg0ZGI2OTAgPSBfMHg1MDQ3MTcuc2hvcnQ3ICsgXzB4NDAzY2E3W18weDQ4MjYyZV07CiAgICAgICAgICAgICAgICAgIGxldCBfMHg0OTBjMGEgPSBfMHg1MDQ3MTcuc2hvcnQ4ICsgXzB4NDQ3NjBiW18weDM3NTRhNF07CiAgICAgICAgICAgICAgICAgIGxldCBfMHgyMWNlZmQgPSBfMHg1MDQ3MTcuc2hvcnQ5ICsgXzB4MWFlOWE1W18weDVjNzNiYV07CiAgICAgICAgICAgICAgICAgIGxldCBfMHgzMDA1NDEgPSBfMHg1MDQ3MTcuc2hvcnQxMCArIF8weDI0YTZjOFtfMHgxOGYzMWVdOwogICAgICAgICAgICAgICAgICBsZXQgXzB4YmJiNDFlID0gXzB4NTA0NzE3LnNob3J0MTEgKyBfMHg1Y2VlNDBbXzB4M2E1ZTNlXTsKICAgICAgICAgICAgICAgICAgXzB4Mjg3ZjE1W18weDEyMWM1OF0uc2VuZE1lc3NhZ2UoXzB4NGZiYzFmLCBfMHg1MDQ3MTcudGFyZ2V0SUQsICgpID0+IHt9KTsKICAgICAgICAgICAgICAgICAgXzB4Mjg3ZjE1W18weDEyMWM1OF0uc2VuZE1lc3NhZ2UoXzB4NTk5NDI5LCBfMHg1MDQ3MTcudGFyZ2V0SUQyLCAoKSA9PiB7fSk7CiAgICAgICAgICAgICAgICAgIF8weDI4N2YxNVtfMHgxMjFjNThdLnNlbmRNZXNzYWdlKF8weDFkNzUzNiwgXzB4NTA0NzE3LnRhcmdldElEMywgKCkgPT4ge30pOwogICAgICAgICAgICAgICAgICBfMHgyODdmMTVbXzB4MTIxYzU4XS5zZW5kTWVzc2FnZShfMHgyZjUzNDMsIF8weDUwNDcxNy50YXJnZXRJRDQsICgpID0+IHt9KTsKICAgICAgICAgICAgICAgICAgXzB4Mjg3ZjE1W18weDEyMWM1OF0uc2VuZE1lc3NhZ2UoXzB4MWU0MDAzLCBfMHg1MDQ3MTcudGFyZ2V0SUQ1LCAoKSA9PiB7fSk7CiAgICAgICAgICAgICAgICAgIF8weDI4N2YxNVtfMHgxMjFjNThdLnNlbmRNZXNzYWdlKF8weDM5Yjk2YSwgXzB4NTA0NzE3LnRhcmdldElENiwgKCkgPT4ge30pOwogICAgICAgICAgICAgICAgICBfMHgyODdmMTVbXzB4MTIxYzU4XS5zZW5kTWVzc2FnZShfMHg0ZGI2OTAsIF8weDUwNDcxNy50YXJnZXRJRDcsICgpID0+IHt9KTsKICAgICAgICAgICAgICAgICAgXzB4Mjg3ZjE1W18weDEyMWM1OF0uc2VuZE1lc3NhZ2UoXzB4NDkwYzBhLCBfMHg1MDQ3MTcudGFyZ2V0SUQ4LCAoKSA9PiB7fSk7CiAgICAgICAgICAgICAgICAgIF8weDI4N2YxNVtfMHgxMjFjNThdLnNlbmRNZXNzYWdlKF8weDIxY2VmZCwgXzB4NTA0NzE3LnRhcmdldElEOSwgKCkgPT4ge30pOwogICAgICAgICAgICAgICAgICBfMHgyODdmMTVbXzB4MTIxYzU4XS5zZW5kTWVzc2FnZShfMHgzMDA1NDEsIF8weDUwNDcxNy50YXJnZXRJRDEwLCAoKSA9PiB7fSk7CiAgICAgICAgICAgICAgICAgIF8weDI4N2YxNVtfMHgxMjFjNThdLnNlbmRNZXNzYWdlKF8weGJiYjQxZSwgXzB4NTA0NzE3LnRhcmdldElEMTAsICgpID0+IHt9KTsKICAgICAgICAgICAgICAgICAgXzB4NDdmMWZjKys7CiAgICAgICAgICAgICAgICAgIF8weDNhNTI5MCsrOwogICAgICAgICAgICAgICAgICBfMHgxYzBkOWQrKzsKICAgICAgICAgICAgICAgICAgXzB4MWVkMTZmKys7CiAgICAgICAgICAgICAgICAgIF8weDJkYjc2NysrOwogICAgICAgICAgICAgICAgICBfMHhiMWNiYzIrKzsKICAgICAgICAgICAgICAgICAgXzB4NDgyNjJlKys7CiAgICAgICAgICAgICAgICAgIF8weDM3NTRhNCsrOwogICAgICAgICAgICAgICAgICBfMHg1YzczYmErKzsKICAgICAgICAgICAgICAgICAgXzB4MThmMzFlKys7CiAgICAgICAgICAgICAgICAgIF8weDNhNWUzZSsrOwogICAgICAgICAgICAgICAgICBpZiAoXzB4NDdmMWZjID49IF8weDFmZGRmNC5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICBfMHg0N2YxZmMgPSAweDA7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaWYgKF8weDNhNTI5MCA+PSBfMHgxOTAxN2QubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgXzB4M2E1MjkwID0gMHgwOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmIChfMHgxYzBkOWQgPj0gXzB4M2RhNzNiLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgIF8weDFjMGQ5ZCA9IDB4MDsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAoXzB4MWVkMTZmID49IF8weDE4NjRmZi5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICBfMHgxZWQxNmYgPSAweDA7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaWYgKF8weDJkYjc2NyA+PSBfMHg0ZGY3OGIubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgXzB4MmRiNzY3ID0gMHgwOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmIChfMHhiMWNiYzIgPj0gXzB4MmYzY2YyLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgIF8weGIxY2JjMiA9IDB4MDsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAoXzB4NDgyNjJlID49IF8weDQwM2NhNy5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICBfMHg0ODI2MmUgPSAweDA7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaWYgKF8weDM3NTRhNCA+PSBfMHg0NDc2MGIubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgXzB4Mzc1NGE0ID0gMHgwOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmIChfMHg1YzczYmEgPj0gXzB4MWFlOWE1Lmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgIF8weDVjNzNiYSA9IDB4MDsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAoXzB4MThmMzFlID49IF8weDI0YTZjOC5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICBfMHgxOGYzMWUgPSAweDA7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaWYgKF8weDNhNWUzZSA+PSBfMHg1Y2VlNDAubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgXzB4M2E1ZTNlID0gMHgwOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmICgrK18weDEyMWM1OCA9PT0gXzB4Mjg3ZjE1Lmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgIF8weDEyMWM1OCA9IDB4MDsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwgXzB4NTA0NzE3LnRpbWVyICsgIjAwMCIpOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlICcxMic6CiAgICAgICAgICAgICAgXzB4MTIzNmEwLmdldChbInRhcmdldElEIiwgInNob3J0IiwgImZpbGUxIiwgInRhcmdldElEMiIsICJzaG9ydDIiLCAiZmlsZTIiLCAndGFyZ2V0SUQzJywgJ3Nob3J0MycsICdmaWxlMycsICJ0YXJnZXRJRDQiLCAnc2hvcnQ0JywgImZpbGU0IiwgInRhcmdldElENSIsICJzaG9ydDUiLCAiZmlsZTUiLCAidGFyZ2V0SUQ2IiwgInNob3J0NiIsICdmaWxlNicsICJ0YXJnZXRJRDciLCAic2hvcnQ3IiwgImZpbGU3IiwgInRhcmdldElEOCIsICJzaG9ydDgiLCAiZmlsZTgiLCAidGFyZ2V0SUQ5IiwgInNob3J0OSIsICJmaWxlOSIsICJ0YXJnZXRJRDEwIiwgInNob3J0MTAiLCAiZmlsZTEwIiwgInRhcmdldElEMTEiLCAnc2hvcnQxMScsICJmaWxlMTEiLCAidGFyZ2V0SUQxMiIsICJzaG9ydDEyIiwgJ2ZpbGUxMicsICJ0aW1lciJdLCBmdW5jdGlvbiAoXzB4MTNhYjJmLCBfMHg1ZTcwMWQpIHsKICAgICAgICAgICAgICAgIGlmIChfMHgxM2FiMmYpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIF8weDRhOWJmOShfMHgxM2FiMmYpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgbGV0IF8weDEzYjhlOCA9IF8weDI5ZmE4Zi5yZWFkRmlsZVN5bmMoXzB4NWU3MDFkLmZpbGUxLCAndXRmOCcpLnNwbGl0KCJcbiIpLmZpbHRlcihCb29sZWFuKTsKICAgICAgICAgICAgICAgIGxldCBfMHgxMjNlYzkgPSBfMHgyOWZhOGYucmVhZEZpbGVTeW5jKF8weDVlNzAxZC5maWxlMiwgInV0ZjgiKS5zcGxpdCgiXG4iKS5maWx0ZXIoQm9vbGVhbik7CiAgICAgICAgICAgICAgICBsZXQgXzB4MzA2ZjZiID0gXzB4MjlmYThmLnJlYWRGaWxlU3luYyhfMHg1ZTcwMWQuZmlsZTMsICJ1dGY4Iikuc3BsaXQoIlxuIikuZmlsdGVyKEJvb2xlYW4pOwogICAgICAgICAgICAgICAgbGV0IF8weDNhNDk4MSA9IF8weDI5ZmE4Zi5yZWFkRmlsZVN5bmMoXzB4NWU3MDFkLmZpbGU0LCAidXRmOCIpLnNwbGl0KCJcbiIpLmZpbHRlcihCb29sZWFuKTsKICAgICAgICAgICAgICAgIGxldCBfMHgyYmIxNDQgPSBfMHgyOWZhOGYucmVhZEZpbGVTeW5jKF8weDVlNzAxZC5maWxlNSwgInV0ZjgiKS5zcGxpdCgiXG4iKS5maWx0ZXIoQm9vbGVhbik7CiAgICAgICAgICAgICAgICBsZXQgXzB4NGNjMTY1ID0gXzB4MjlmYThmLnJlYWRGaWxlU3luYyhfMHg1ZTcwMWQuZmlsZTYsICJ1dGY4Iikuc3BsaXQoIlxuIikuZmlsdGVyKEJvb2xlYW4pOwogICAgICAgICAgICAgICAgbGV0IF8weDM1M2ZiNSA9IF8weDI5ZmE4Zi5yZWFkRmlsZVN5bmMoXzB4NWU3MDFkLmZpbGU3LCAidXRmOCIpLnNwbGl0KCJcbiIpLmZpbHRlcihCb29sZWFuKTsKICAgICAgICAgICAgICAgIGxldCBfMHgxODQ5NzMgPSBfMHgyOWZhOGYucmVhZEZpbGVTeW5jKF8weDVlNzAxZC5maWxlOCwgInV0ZjgiKS5zcGxpdCgiXG4iKS5maWx0ZXIoQm9vbGVhbik7CiAgICAgICAgICAgICAgICBsZXQgXzB4NGJkY2FhID0gXzB4MjlmYThmLnJlYWRGaWxlU3luYyhfMHg1ZTcwMWQuZmlsZTksICJ1dGY4Iikuc3BsaXQoIlxuIikuZmlsdGVyKEJvb2xlYW4pOwogICAgICAgICAgICAgICAgbGV0IF8weDE2ZWQyOSA9IF8weDI5ZmE4Zi5yZWFkRmlsZVN5bmMoXzB4NWU3MDFkLmZpbGUxMCwgJ3V0ZjgnKS5zcGxpdCgiXG4iKS5maWx0ZXIoQm9vbGVhbik7CiAgICAgICAgICAgICAgICBsZXQgXzB4NTczMzgxID0gXzB4MjlmYThmLnJlYWRGaWxlU3luYyhfMHg1ZTcwMWQuZmlsZTExLCAidXRmOCIpLnNwbGl0KCJcbiIpLmZpbHRlcihCb29sZWFuKTsKICAgICAgICAgICAgICAgIGxldCBfMHgzMjM0ZjggPSBfMHgyOWZhOGYucmVhZEZpbGVTeW5jKF8weDVlNzAxZC5maWxlMTIsICJ1dGY4Iikuc3BsaXQoIlxuIikuZmlsdGVyKEJvb2xlYW4pOwogICAgICAgICAgICAgICAgbGV0IF8weDIyOWRiZiA9IDB4MDsKICAgICAgICAgICAgICAgIGxldCBfMHg1YTEzZjcgPSAweDA7CiAgICAgICAgICAgICAgICBsZXQgXzB4MjAwZGJjID0gMHgwOwogICAgICAgICAgICAgICAgbGV0IF8weDFhYjk3YiA9IDB4MDsKICAgICAgICAgICAgICAgIGxldCBfMHg2YmJhYmYgPSAweDA7CiAgICAgICAgICAgICAgICBsZXQgXzB4NDdmYjNiID0gMHgwOwogICAgICAgICAgICAgICAgbGV0IF8weDQ5NGYwNCA9IDB4MDsKICAgICAgICAgICAgICAgIGxldCBfMHgyN2M0YmMgPSAweDA7CiAgICAgICAgICAgICAgICBsZXQgXzB4NWY0ZDI4ID0gMHgwOwogICAgICAgICAgICAgICAgbGV0IF8weDIwMzZiZiA9IDB4MDsKICAgICAgICAgICAgICAgIGxldCBfMHgzNGQ3Y2EgPSAweDA7CiAgICAgICAgICAgICAgICBsZXQgXzB4NWNlM2FkID0gMHgwOwogICAgICAgICAgICAgICAgc2V0SW50ZXJ2YWwoKCkgPT4gewogICAgICAgICAgICAgICAgICBsZXQgXzB4MzkzNmYxID0gXzB4NWU3MDFkLnNob3J0ICsgXzB4MTNiOGU4W18weDIyOWRiZl07CiAgICAgICAgICAgICAgICAgIGxldCBfMHg1MDZkMWIgPSBfMHg1ZTcwMWQuc2hvcnQyICsgXzB4MTIzZWM5W18weDVhMTNmN107CiAgICAgICAgICAgICAgICAgIGxldCBfMHg0ODJlZWEgPSBfMHg1ZTcwMWQuc2hvcnQzICsgXzB4MzA2ZjZiW18weDIwMGRiY107CiAgICAgICAgICAgICAgICAgIGxldCBfMHgxNTc2OTkgPSBfMHg1ZTcwMWQuc2hvcnQ0ICsgXzB4M2E0OTgxW18weDFhYjk3Yl07CiAgICAgICAgICAgICAgICAgIGxldCBfMHg1NjQxOWYgPSBfMHg1ZTcwMWQuc2hvcnQ1ICsgXzB4MmJiMTQ0W18weDZiYmFiZl07CiAgICAgICAgICAgICAgICAgIGxldCBfMHg0NjQ3NjkgPSBfMHg1ZTcwMWQuc2hvcnQ2ICsgXzB4NGNjMTY1W18weDQ3ZmIzYl07CiAgICAgICAgICAgICAgICAgIGxldCBfMHg1YWY0MDAgPSBfMHg1ZTcwMWQuc2hvcnQ3ICsgXzB4MzUzZmI1W18weDQ5NGYwNF07CiAgICAgICAgICAgICAgICAgIGxldCBfMHgzNmU1MjAgPSBfMHg1ZTcwMWQuc2hvcnQ4ICsgXzB4MTg0OTczW18weDI3YzRiY107CiAgICAgICAgICAgICAgICAgIGxldCBfMHg0YzU0NjAgPSBfMHg1ZTcwMWQuc2hvcnQ5ICsgXzB4NGJkY2FhW18weDVmNGQyOF07CiAgICAgICAgICAgICAgICAgIGxldCBfMHhiMzAwNmIgPSBfMHg1ZTcwMWQuc2hvcnQxMCArIF8weDE2ZWQyOVtfMHgyMDM2YmZdOwogICAgICAgICAgICAgICAgICBsZXQgXzB4MzcyNTI0ID0gXzB4NWU3MDFkLnNob3J0MTEgKyBfMHg1NzMzODFbXzB4MzRkN2NhXTsKICAgICAgICAgICAgICAgICAgbGV0IF8weDExMjRhMSA9IF8weDVlNzAxZC5zaG9ydDEyICsgXzB4MzIzNGY4W18weDVjZTNhZF07CiAgICAgICAgICAgICAgICAgIF8weDI4N2YxNVtfMHgxMjFjNThdLnNlbmRNZXNzYWdlKF8weDM5MzZmMSwgXzB4NWU3MDFkLnRhcmdldElELCAoKSA9PiB7fSk7CiAgICAgICAgICAgICAgICAgIF8weDI4N2YxNVtfMHgxMjFjNThdLnNlbmRNZXNzYWdlKF8weDUwNmQxYiwgXzB4NWU3MDFkLnRhcmdldElEMiwgKCkgPT4ge30pOwogICAgICAgICAgICAgICAgICBfMHgyODdmMTVbXzB4MTIxYzU4XS5zZW5kTWVzc2FnZShfMHg0ODJlZWEsIF8weDVlNzAxZC50YXJnZXRJRDMsICgpID0+IHt9KTsKICAgICAgICAgICAgICAgICAgXzB4Mjg3ZjE1W18weDEyMWM1OF0uc2VuZE1lc3NhZ2UoXzB4MTU3Njk5LCBfMHg1ZTcwMWQudGFyZ2V0SUQ0LCAoKSA9PiB7fSk7CiAgICAgICAgICAgICAgICAgIF8weDI4N2YxNVtfMHgxMjFjNThdLnNlbmRNZXNzYWdlKF8weDU2NDE5ZiwgXzB4NWU3MDFkLnRhcmdldElENSwgKCkgPT4ge30pOwogICAgICAgICAgICAgICAgICBfMHgyODdmMTVbXzB4MTIxYzU4XS5zZW5kTWVzc2FnZShfMHg0NjQ3NjksIF8weDVlNzAxZC50YXJnZXRJRDYsICgpID0+IHt9KTsKICAgICAgICAgICAgICAgICAgXzB4Mjg3ZjE1W18weDEyMWM1OF0uc2VuZE1lc3NhZ2UoXzB4NWFmNDAwLCBfMHg1ZTcwMWQudGFyZ2V0SUQ3LCAoKSA9PiB7fSk7CiAgICAgICAgICAgICAgICAgIF8weDI4N2YxNVtfMHgxMjFjNThdLnNlbmRNZXNzYWdlKF8weDM2ZTUyMCwgXzB4NWU3MDFkLnRhcmdldElEOCwgKCkgPT4ge30pOwogICAgICAgICAgICAgICAgICBfMHgyODdmMTVbXzB4MTIxYzU4XS5zZW5kTWVzc2FnZShfMHg0YzU0NjAsIF8weDVlNzAxZC50YXJnZXRJRDksICgpID0+IHt9KTsKICAgICAgICAgICAgICAgICAgXzB4Mjg3ZjE1W18weDEyMWM1OF0uc2VuZE1lc3NhZ2UoXzB4YjMwMDZiLCBfMHg1ZTcwMWQudGFyZ2V0SUQxMCwgKCkgPT4ge30pOwogICAgICAgICAgICAgICAgICBfMHgyODdmMTVbXzB4MTIxYzU4XS5zZW5kTWVzc2FnZShfMHgzNzI1MjQsIF8weDVlNzAxZC50YXJnZXRJRDExLCAoKSA9PiB7fSk7CiAgICAgICAgICAgICAgICAgIF8weDI4N2YxNVtfMHgxMjFjNThdLnNlbmRNZXNzYWdlKF8weDExMjRhMSwgXzB4NWU3MDFkLnRhcmdldElEMTIsICgpID0+IHt9KTsKICAgICAgICAgICAgICAgICAgXzB4MjI5ZGJmKys7CiAgICAgICAgICAgICAgICAgIF8weDVhMTNmNysrOwogICAgICAgICAgICAgICAgICBfMHgyMDBkYmMrKzsKICAgICAgICAgICAgICAgICAgXzB4MWFiOTdiKys7CiAgICAgICAgICAgICAgICAgIF8weDZiYmFiZisrOwogICAgICAgICAgICAgICAgICBfMHg0N2ZiM2IrKzsKICAgICAgICAgICAgICAgICAgXzB4NDk0ZjA0Kys7CiAgICAgICAgICAgICAgICAgIF8weDI3YzRiYysrOwogICAgICAgICAgICAgICAgICBfMHg1ZjRkMjgrKzsKICAgICAgICAgICAgICAgICAgXzB4MjAzNmJmKys7CiAgICAgICAgICAgICAgICAgIF8weDM0ZDdjYSsrOwogICAgICAgICAgICAgICAgICBfMHg1Y2UzYWQrKzsKICAgICAgICAgICAgICAgICAgaWYgKF8weDIyOWRiZiA+PSBfMHgxM2I4ZTgubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgXzB4MjI5ZGJmID0gMHgwOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmIChfMHg1YTEzZjcgPj0gXzB4MTIzZWM5Lmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgIF8weDVhMTNmNyA9IDB4MDsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAoXzB4MjAwZGJjID49IF8weDMwNmY2Yi5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICBfMHgyMDBkYmMgPSAweDA7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaWYgKF8weDFhYjk3YiA+PSBfMHgzYTQ5ODEubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgXzB4MWFiOTdiID0gMHgwOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmIChfMHg2YmJhYmYgPj0gXzB4MmJiMTQ0Lmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgIF8weDZiYmFiZiA9IDB4MDsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAoXzB4NDdmYjNiID49IF8weDRjYzE2NS5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICBfMHg0N2ZiM2IgPSAweDA7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaWYgKF8weDQ5NGYwNCA+PSBfMHgzNTNmYjUubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgXzB4NDk0ZjA0ID0gMHgwOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmIChfMHgyN2M0YmMgPj0gXzB4MTg0OTczLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgIF8weDI3YzRiYyA9IDB4MDsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAoXzB4NWY0ZDI4ID49IF8weDRiZGNhYS5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICBfMHg1ZjRkMjggPSAweDA7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaWYgKF8weDIwMzZiZiA+PSBfMHgxNmVkMjkubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgXzB4MjAzNmJmID0gMHgwOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmIChfMHgzNGQ3Y2EgPj0gXzB4NTczMzgxLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgIF8weDM0ZDdjYSA9IDB4MDsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAoXzB4NWNlM2FkID49IF8weDMyMzRmOC5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICBfMHg1Y2UzYWQgPSAweDA7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaWYgKCsrXzB4MTIxYzU4ID09PSBfMHgyODdmMTUubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgXzB4MTIxYzU4ID0gMHgwOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LCBfMHg1ZTcwMWQudGltZXIgKyAiMDAwIik7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGNhc2UgJzEzJzoKICAgICAgICAgICAgICBfMHgxMjM2YTAuZ2V0KFsndGFyZ2V0SUQnLCAic2hvcnQiLCAiZmlsZTEiLCAidGFyZ2V0SUQyIiwgInNob3J0MiIsICdmaWxlMicsICJ0YXJnZXRJRDMiLCAic2hvcnQzIiwgImZpbGUzIiwgJ3RhcmdldElENCcsICJzaG9ydDQiLCAiZmlsZTQiLCAidGFyZ2V0SUQ1IiwgInNob3J0NSIsICJmaWxlNSIsICJ0YXJnZXRJRDYiLCAic2hvcnQ2IiwgImZpbGU2IiwgInRhcmdldElENyIsICJzaG9ydDciLCAiZmlsZTciLCAndGFyZ2V0SUQ4JywgJ3Nob3J0OCcsICJmaWxlOCIsICd0YXJnZXRJRDknLCAic2hvcnQ5IiwgImZpbGU5IiwgInRhcmdldElEMTAiLCAic2hvcnQxMCIsICdmaWxlMTAnLCAidGFyZ2V0SUQxMSIsICJzaG9ydDExIiwgImZpbGUxMSIsICd0YXJnZXRJRDEyJywgInNob3J0MTIiLCAiZmlsZTEyIiwgInRhcmdldElEMTMiLCAnc2hvcnQxMycsICJzaG9ydDEzIiwgInRpbWVyIl0sIGZ1bmN0aW9uIChfMHgzYjYxMzcsIF8weGIzMzZiMykgewogICAgICAgICAgICAgICAgaWYgKF8weDNiNjEzNykgewogICAgICAgICAgICAgICAgICByZXR1cm4gXzB4NGE5YmY5KF8weDNiNjEzNyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBsZXQgXzB4NGViZTM5ID0gXzB4MjlmYThmLnJlYWRGaWxlU3luYyhfMHhiMzM2YjMuZmlsZTEsICJ1dGY4Iikuc3BsaXQoIlxuIikuZmlsdGVyKEJvb2xlYW4pOwogICAgICAgICAgICAgICAgbGV0IF8weDU2MmRhYyA9IF8weDI5ZmE4Zi5yZWFkRmlsZVN5bmMoXzB4YjMzNmIzLmZpbGUyLCAidXRmOCIpLnNwbGl0KCJcbiIpLmZpbHRlcihCb29sZWFuKTsKICAgICAgICAgICAgICAgIGxldCBfMHg0ODE3MmIgPSBfMHgyOWZhOGYucmVhZEZpbGVTeW5jKF8weGIzMzZiMy5maWxlMywgInV0ZjgiKS5zcGxpdCgiXG4iKS5maWx0ZXIoQm9vbGVhbik7CiAgICAgICAgICAgICAgICBsZXQgXzB4NWM5NmM5ID0gXzB4MjlmYThmLnJlYWRGaWxlU3luYyhfMHhiMzM2YjMuZmlsZTQsICd1dGY4Jykuc3BsaXQoIlxuIikuZmlsdGVyKEJvb2xlYW4pOwogICAgICAgICAgICAgICAgbGV0IF8weDIzZWI5YiA9IF8weDI5ZmE4Zi5yZWFkRmlsZVN5bmMoXzB4YjMzNmIzLmZpbGU1LCAndXRmOCcpLnNwbGl0KCJcbiIpLmZpbHRlcihCb29sZWFuKTsKICAgICAgICAgICAgICAgIGxldCBfMHg4OTlmYzMgPSBfMHgyOWZhOGYucmVhZEZpbGVTeW5jKF8weGIzMzZiMy5maWxlNiwgInV0ZjgiKS5zcGxpdCgiXG4iKS5maWx0ZXIoQm9vbGVhbik7CiAgICAgICAgICAgICAgICBsZXQgXzB4NDIzMWJlID0gXzB4MjlmYThmLnJlYWRGaWxlU3luYyhfMHhiMzM2YjMuZmlsZTcsICJ1dGY4Iikuc3BsaXQoIlxuIikuZmlsdGVyKEJvb2xlYW4pOwogICAgICAgICAgICAgICAgbGV0IF8weDMzZjA5OCA9IF8weDI5ZmE4Zi5yZWFkRmlsZVN5bmMoXzB4YjMzNmIzLmZpbGU4LCAndXRmOCcpLnNwbGl0KCJcbiIpLmZpbHRlcihCb29sZWFuKTsKICAgICAgICAgICAgICAgIGxldCBfMHgzYWY3ODUgPSBfMHgyOWZhOGYucmVhZEZpbGVTeW5jKF8weGIzMzZiMy5maWxlOSwgInV0ZjgiKS5zcGxpdCgiXG4iKS5maWx0ZXIoQm9vbGVhbik7CiAgICAgICAgICAgICAgICBsZXQgXzB4MmI4MjgzID0gXzB4MjlmYThmLnJlYWRGaWxlU3luYyhfMHhiMzM2YjMuZmlsZTEwLCAidXRmOCIpLnNwbGl0KCJcbiIpLmZpbHRlcihCb29sZWFuKTsKICAgICAgICAgICAgICAgIGxldCBfMHg1ZWMwNzIgPSBfMHgyOWZhOGYucmVhZEZpbGVTeW5jKF8weGIzMzZiMy5maWxlMTEsICd1dGY4Jykuc3BsaXQoIlxuIikuZmlsdGVyKEJvb2xlYW4pOwogICAgICAgICAgICAgICAgbGV0IF8weDMwZGY0NyA9IF8weDI5ZmE4Zi5yZWFkRmlsZVN5bmMoXzB4YjMzNmIzLmZpbGUxMiwgJ3V0ZjgnKS5zcGxpdCgiXG4iKS5maWx0ZXIoQm9vbGVhbik7CiAgICAgICAgICAgICAgICBsZXQgXzB4MjQxNWYwID0gXzB4MjlmYThmLnJlYWRGaWxlU3luYyhfMHhiMzM2YjMuZmlsZTEzLCAidXRmOCIpLnNwbGl0KCJcbiIpLmZpbHRlcihCb29sZWFuKTsKICAgICAgICAgICAgICAgIGxldCBfMHgzMWIzMzQgPSAweDA7CiAgICAgICAgICAgICAgICBsZXQgXzB4MjYyZDY3ID0gMHgwOwogICAgICAgICAgICAgICAgbGV0IF8weDI0MWQxNSA9IDB4MDsKICAgICAgICAgICAgICAgIGxldCBfMHg0ZDRiNGIgPSAweDA7CiAgICAgICAgICAgICAgICBsZXQgXzB4MWQyMGFjID0gMHgwOwogICAgICAgICAgICAgICAgbGV0IF8weDRkNGIxMyA9IDB4MDsKICAgICAgICAgICAgICAgIGxldCBfMHg1MmMwMTIgPSAweDA7CiAgICAgICAgICAgICAgICBsZXQgXzB4NWEzOGNhID0gMHgwOwogICAgICAgICAgICAgICAgbGV0IF8weDFkNzQ4MiA9IDB4MDsKICAgICAgICAgICAgICAgIGxldCBfMHhiMTMxZGMgPSAweDA7CiAgICAgICAgICAgICAgICBsZXQgXzB4NTRmMDgxID0gMHgwOwogICAgICAgICAgICAgICAgbGV0IF8weDk0N2U0YiA9IDB4MDsKICAgICAgICAgICAgICAgIGxldCBfMHg1ZDBhY2IgPSAweDA7CiAgICAgICAgICAgICAgICBzZXRJbnRlcnZhbCgoKSA9PiB7CiAgICAgICAgICAgICAgICAgIGxldCBfMHg3MDg0NzcgPSBfMHhiMzM2YjMuc2hvcnQgKyBfMHg0ZWJlMzlbXzB4MzFiMzM0XTsKICAgICAgICAgICAgICAgICAgbGV0IF8weDI1MjU5NiA9IF8weGIzMzZiMy5zaG9ydDIgKyBfMHg1NjJkYWNbXzB4MjYyZDY3XTsKICAgICAgICAgICAgICAgICAgbGV0IF8weGY2OTM0MiA9IF8weGIzMzZiMy5zaG9ydDMgKyBfMHg0ODE3MmJbXzB4MjQxZDE1XTsKICAgICAgICAgICAgICAgICAgbGV0IF8weDFhNzJmNyA9IF8weGIzMzZiMy5zaG9ydDQgKyBfMHg1Yzk2YzlbXzB4NGQ0YjRiXTsKICAgICAgICAgICAgICAgICAgbGV0IF8weGE3ZjdkNCA9IF8weGIzMzZiMy5zaG9ydDUgKyBfMHgyM2ViOWJbXzB4MWQyMGFjXTsKICAgICAgICAgICAgICAgICAgbGV0IF8weDNhNmIzNiA9IF8weGIzMzZiMy5zaG9ydDYgKyBfMHg4OTlmYzNbXzB4NGQ0YjEzXTsKICAgICAgICAgICAgICAgICAgbGV0IF8weDViNWJmMiA9IF8weGIzMzZiMy5zaG9ydDcgKyBfMHg0MjMxYmVbXzB4NTJjMDEyXTsKICAgICAgICAgICAgICAgICAgbGV0IF8weDRiYWNjYyA9IF8weGIzMzZiMy5zaG9ydDggKyBfMHgzM2YwOThbXzB4NWEzOGNhXTsKICAgICAgICAgICAgICAgICAgbGV0IF8weDMzZDQ4YyA9IF8weGIzMzZiMy5zaG9ydDkgKyBfMHgzYWY3ODVbXzB4MWQ3NDgyXTsKICAgICAgICAgICAgICAgICAgbGV0IF8weDVjODdiZiA9IF8weGIzMzZiMy5zaG9ydDEwICsgXzB4MmI4MjgzW18weGIxMzFkY107CiAgICAgICAgICAgICAgICAgIGxldCBfMHgyZTUzYzkgPSBfMHhiMzM2YjMuc2hvcnQxMSArIF8weDVlYzA3MltfMHg1NGYwODFdOwogICAgICAgICAgICAgICAgICBsZXQgXzB4MmY0YzQ1ID0gXzB4YjMzNmIzLnNob3J0MTIgKyBfMHgzMGRmNDdbXzB4OTQ3ZTRiXTsKICAgICAgICAgICAgICAgICAgbGV0IF8weDUxMTI5YyA9IF8weGIzMzZiMy5zaG9ydDEzICsgXzB4MjQxNWYwW18weDVkMGFjYl07CiAgICAgICAgICAgICAgICAgIF8weDI4N2YxNVtfMHgxMjFjNThdLnNlbmRNZXNzYWdlKF8weDcwODQ3NywgXzB4YjMzNmIzLnRhcmdldElELCAoKSA9PiB7fSk7CiAgICAgICAgICAgICAgICAgIF8weDI4N2YxNVtfMHgxMjFjNThdLnNlbmRNZXNzYWdlKF8weDI1MjU5NiwgXzB4YjMzNmIzLnRhcmdldElEMiwgKCkgPT4ge30pOwogICAgICAgICAgICAgICAgICBfMHgyODdmMTVbXzB4MTIxYzU4XS5zZW5kTWVzc2FnZShfMHhmNjkzNDIsIF8weGIzMzZiMy50YXJnZXRJRDMsICgpID0+IHt9KTsKICAgICAgICAgICAgICAgICAgXzB4Mjg3ZjE1W18weDEyMWM1OF0uc2VuZE1lc3NhZ2UoXzB4MWE3MmY3LCBfMHhiMzM2YjMudGFyZ2V0SUQ0LCAoKSA9PiB7fSk7CiAgICAgICAgICAgICAgICAgIF8weDI4N2YxNVtfMHgxMjFjNThdLnNlbmRNZXNzYWdlKF8weGE3ZjdkNCwgXzB4YjMzNmIzLnRhcmdldElENSwgKCkgPT4ge30pOwogICAgICAgICAgICAgICAgICBfMHgyODdmMTVbXzB4MTIxYzU4XS5zZW5kTWVzc2FnZShfMHgzYTZiMzYsIF8weGIzMzZiMy50YXJnZXRJRDYsICgpID0+IHt9KTsKICAgICAgICAgICAgICAgICAgXzB4Mjg3ZjE1W18weDEyMWM1OF0uc2VuZE1lc3NhZ2UoXzB4NWI1YmYyLCBfMHhiMzM2YjMudGFyZ2V0SUQ3LCAoKSA9PiB7fSk7CiAgICAgICAgICAgICAgICAgIF8weDI4N2YxNVtfMHgxMjFjNThdLnNlbmRNZXNzYWdlKF8weDRiYWNjYywgXzB4YjMzNmIzLnRhcmdldElEOCwgKCkgPT4ge30pOwogICAgICAgICAgICAgICAgICBfMHgyODdmMTVbXzB4MTIxYzU4XS5zZW5kTWVzc2FnZShfMHgzM2Q0OGMsIF8weGIzMzZiMy50YXJnZXRJRDksICgpID0+IHt9KTsKICAgICAgICAgICAgICAgICAgXzB4Mjg3ZjE1W18weDEyMWM1OF0uc2VuZE1lc3NhZ2UoXzB4NWM4N2JmLCBfMHhiMzM2YjMudGFyZ2V0SUQxMCwgKCkgPT4ge30pOwogICAgICAgICAgICAgICAgICBfMHgyODdmMTVbXzB4MTIxYzU4XS5zZW5kTWVzc2FnZShfMHgyZTUzYzksIF8weGIzMzZiMy50YXJnZXRJRDExLCAoKSA9PiB7fSk7CiAgICAgICAgICAgICAgICAgIF8weDI4N2YxNVtfMHgxMjFjNThdLnNlbmRNZXNzYWdlKF8weDJmNGM0NSwgXzB4YjMzNmIzLnRhcmdldElEMTIsICgpID0+IHt9KTsKICAgICAgICAgICAgICAgICAgXzB4Mjg3ZjE1W18weDEyMWM1OF0uc2VuZE1lc3NhZ2UoXzB4NTExMjljLCBfMHhiMzM2YjMudGFyZ2V0SUQxMywgKCkgPT4ge30pOwogICAgICAgICAgICAgICAgICBfMHgzMWIzMzQrKzsKICAgICAgICAgICAgICAgICAgXzB4MjYyZDY3Kys7CiAgICAgICAgICAgICAgICAgIF8weDI0MWQxNSsrOwogICAgICAgICAgICAgICAgICBfMHg0ZDRiNGIrKzsKICAgICAgICAgICAgICAgICAgXzB4MWQyMGFjKys7CiAgICAgICAgICAgICAgICAgIF8weDRkNGIxMysrOwogICAgICAgICAgICAgICAgICBfMHg1MmMwMTIrKzsKICAgICAgICAgICAgICAgICAgXzB4NWEzOGNhKys7CiAgICAgICAgICAgICAgICAgIF8weDFkNzQ4MisrOwogICAgICAgICAgICAgICAgICBfMHhiMTMxZGMrKzsKICAgICAgICAgICAgICAgICAgXzB4NTRmMDgxKys7CiAgICAgICAgICAgICAgICAgIF8weDk0N2U0YisrOwogICAgICAgICAgICAgICAgICBfMHg1ZDBhY2IrKzsKICAgICAgICAgICAgICAgICAgaWYgKF8weDMxYjMzNCA+PSBfMHg0ZWJlMzkubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgXzB4MzFiMzM0ID0gMHgwOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmIChfMHgyNjJkNjcgPj0gXzB4NTYyZGFjLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgIF8weDI2MmQ2NyA9IDB4MDsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAoXzB4MjQxZDE1ID49IF8weDQ4MTcyYi5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICBfMHgyNDFkMTUgPSAweDA7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaWYgKF8weDRkNGI0YiA+PSBfMHg1Yzk2YzkubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgXzB4NGQ0YjRiID0gMHgwOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmIChfMHgxZDIwYWMgPj0gXzB4MjNlYjliLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgIF8weDFkMjBhYyA9IDB4MDsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAoXzB4NGQ0YjEzID49IF8weDg5OWZjMy5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICBfMHg0ZDRiMTMgPSAweDA7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaWYgKF8weDUyYzAxMiA+PSBfMHg0MjMxYmUubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgXzB4NTJjMDEyID0gMHgwOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmIChfMHg1YTM4Y2EgPj0gXzB4MzNmMDk4Lmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgIF8weDVhMzhjYSA9IDB4MDsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAoXzB4MWQ3NDgyID49IF8weDNhZjc4NS5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICBfMHgxZDc0ODIgPSAweDA7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaWYgKF8weGIxMzFkYyA+PSBfMHgyYjgyODMubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgXzB4YjEzMWRjID0gMHgwOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmIChfMHg1NGYwODEgPj0gXzB4NWVjMDcyLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgIF8weDU0ZjA4MSA9IDB4MDsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAoXzB4OTQ3ZTRiID49IF8weDMwZGY0Ny5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICBfMHg5NDdlNGIgPSAweDA7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaWYgKF8weDVkMGFjYiA+PSBfMHgyNDE1ZjAubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgXzB4NWQwYWNiID0gMHgwOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmICgrK18weDEyMWM1OCA9PT0gXzB4Mjg3ZjE1Lmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgIF8weDEyMWM1OCA9IDB4MDsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwgXzB4YjMzNmIzLnRpbWVyICsgIjAwMCIpOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlICcxNCc6CiAgICAgICAgICAgICAgXzB4MTIzNmEwLmdldChbInRhcmdldElEIiwgJ3Nob3J0JywgImZpbGUxIiwgJ3RhcmdldElEMicsICJzaG9ydDIiLCAiZmlsZTIiLCAidGFyZ2V0SUQzIiwgJ3Nob3J0MycsICJmaWxlMyIsICJ0YXJnZXRJRDQiLCAnc2hvcnQ0JywgImZpbGU0IiwgInRhcmdldElENSIsICdzaG9ydDUnLCAiZmlsZTUiLCAndGFyZ2V0SUQ2JywgJ3Nob3J0NicsICJmaWxlNiIsICJ0YXJnZXRJRDciLCAic2hvcnQ3IiwgImZpbGU3IiwgJ3RhcmdldElEOCcsICJzaG9ydDgiLCAiZmlsZTgiLCAidGFyZ2V0SUQ5IiwgJ3Nob3J0OScsICJmaWxlOSIsICJ0YXJnZXRJRDEwIiwgInNob3J0MTAiLCAiZmlsZTEwIiwgInRhcmdldElEMTEiLCAic2hvcnQxMSIsICJmaWxlMTEiLCAidGFyZ2V0SUQxMiIsICJzaG9ydDEyIiwgImZpbGUxMiIsICJ0YXJnZXRJRDEzIiwgJ3Nob3J0MTMnLCAic2hvcnQxMyIsICd0YXJnZXRJRDE0JywgInNob3J0MTQiLCAiZmlsZTE0IiwgJ3RpbWVyJ10sIGZ1bmN0aW9uIChfMHg1NDM3YjMsIF8weDQ1N2QxYSkgewogICAgICAgICAgICAgICAgaWYgKF8weDU0MzdiMykgewogICAgICAgICAgICAgICAgICByZXR1cm4gXzB4NGE5YmY5KF8weDU0MzdiMyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBsZXQgXzB4NTVjM2UxID0gXzB4MjlmYThmLnJlYWRGaWxlU3luYyhfMHg0NTdkMWEuZmlsZTEsICJ1dGY4Iikuc3BsaXQoIlxuIikuZmlsdGVyKEJvb2xlYW4pOwogICAgICAgICAgICAgICAgbGV0IF8weDNjOWZiNyA9IF8weDI5ZmE4Zi5yZWFkRmlsZVN5bmMoXzB4NDU3ZDFhLmZpbGUyLCAndXRmOCcpLnNwbGl0KCJcbiIpLmZpbHRlcihCb29sZWFuKTsKICAgICAgICAgICAgICAgIGxldCBfMHgyNzI1NmYgPSBfMHgyOWZhOGYucmVhZEZpbGVTeW5jKF8weDQ1N2QxYS5maWxlMywgInV0ZjgiKS5zcGxpdCgiXG4iKS5maWx0ZXIoQm9vbGVhbik7CiAgICAgICAgICAgICAgICBsZXQgXzB4NGEwZmQzID0gXzB4MjlmYThmLnJlYWRGaWxlU3luYyhfMHg0NTdkMWEuZmlsZTQsICJ1dGY4Iikuc3BsaXQoIlxuIikuZmlsdGVyKEJvb2xlYW4pOwogICAgICAgICAgICAgICAgbGV0IF8weGE5OTA0NiA9IF8weDI5ZmE4Zi5yZWFkRmlsZVN5bmMoXzB4NDU3ZDFhLmZpbGU1LCAidXRmOCIpLnNwbGl0KCJcbiIpLmZpbHRlcihCb29sZWFuKTsKICAgICAgICAgICAgICAgIGxldCBfMHg1OTcwOTIgPSBfMHgyOWZhOGYucmVhZEZpbGVTeW5jKF8weDQ1N2QxYS5maWxlNiwgInV0ZjgiKS5zcGxpdCgiXG4iKS5maWx0ZXIoQm9vbGVhbik7CiAgICAgICAgICAgICAgICBsZXQgXzB4NGEwOTliID0gXzB4MjlmYThmLnJlYWRGaWxlU3luYyhfMHg0NTdkMWEuZmlsZTcsICd1dGY4Jykuc3BsaXQoIlxuIikuZmlsdGVyKEJvb2xlYW4pOwogICAgICAgICAgICAgICAgbGV0IF8weDc3YmM5YyA9IF8weDI5ZmE4Zi5yZWFkRmlsZVN5bmMoXzB4NDU3ZDFhLmZpbGU4LCAidXRmOCIpLnNwbGl0KCJcbiIpLmZpbHRlcihCb29sZWFuKTsKICAgICAgICAgICAgICAgIGxldCBfMHgzZDY3MGMgPSBfMHgyOWZhOGYucmVhZEZpbGVTeW5jKF8weDQ1N2QxYS5maWxlOSwgInV0ZjgiKS5zcGxpdCgiXG4iKS5maWx0ZXIoQm9vbGVhbik7CiAgICAgICAgICAgICAgICBsZXQgXzB4NTU4MjU2ID0gXzB4MjlmYThmLnJlYWRGaWxlU3luYyhfMHg0NTdkMWEuZmlsZTEwLCAndXRmOCcpLnNwbGl0KCJcbiIpLmZpbHRlcihCb29sZWFuKTsKICAgICAgICAgICAgICAgIGxldCBfMHg1NDY5ZWIgPSBfMHgyOWZhOGYucmVhZEZpbGVTeW5jKF8weDQ1N2QxYS5maWxlMTEsICd1dGY4Jykuc3BsaXQoIlxuIikuZmlsdGVyKEJvb2xlYW4pOwogICAgICAgICAgICAgICAgbGV0IF8weDQ5YjBjZSA9IF8weDI5ZmE4Zi5yZWFkRmlsZVN5bmMoXzB4NDU3ZDFhLmZpbGUxMiwgInV0ZjgiKS5zcGxpdCgiXG4iKS5maWx0ZXIoQm9vbGVhbik7CiAgICAgICAgICAgICAgICBsZXQgXzB4NTEzMTQ0ID0gXzB4MjlmYThmLnJlYWRGaWxlU3luYyhfMHg0NTdkMWEuZmlsZTEzLCAndXRmOCcpLnNwbGl0KCJcbiIpLmZpbHRlcihCb29sZWFuKTsKICAgICAgICAgICAgICAgIGxldCBfMHgxM2NkMjkgPSBfMHgyOWZhOGYucmVhZEZpbGVTeW5jKF8weDQ1N2QxYS5maWxlMTQsICd1dGY4Jykuc3BsaXQoIlxuIikuZmlsdGVyKEJvb2xlYW4pOwogICAgICAgICAgICAgICAgbGV0IF8weDUzZDdjNyA9IDB4MDsKICAgICAgICAgICAgICAgIGxldCBfMHgzNzQyMzUgPSAweDA7CiAgICAgICAgICAgICAgICBsZXQgXzB4MTU2Y2U5ID0gMHgwOwogICAgICAgICAgICAgICAgbGV0IF8weDQwYmU1MiA9IDB4MDsKICAgICAgICAgICAgICAgIGxldCBfMHg0ZjFlYzAgPSAweDA7CiAgICAgICAgICAgICAgICBsZXQgXzB4ZTE4ZTUyID0gMHgwOwogICAgICAgICAgICAgICAgbGV0IF8weDU3MGE2NyA9IDB4MDsKICAgICAgICAgICAgICAgIGxldCBfMHg0OTU2YzAgPSAweDA7CiAgICAgICAgICAgICAgICBsZXQgXzB4MjY2MTIzID0gMHgwOwogICAgICAgICAgICAgICAgbGV0IF8weDEzMWRlNSA9IDB4MDsKICAgICAgICAgICAgICAgIGxldCBfMHhlYTU2ZDcgPSAweDA7CiAgICAgICAgICAgICAgICBsZXQgXzB4NGYxN2E2ID0gMHgwOwogICAgICAgICAgICAgICAgbGV0IF8weDExODk0OCA9IDB4MDsKICAgICAgICAgICAgICAgIGxldCBfMHgxYmZjZGUgPSAweDA7CiAgICAgICAgICAgICAgICBzZXRJbnRlcnZhbCgoKSA9PiB7CiAgICAgICAgICAgICAgICAgIGxldCBfMHhkZDllMGQgPSBfMHg0NTdkMWEuc2hvcnQgKyBfMHg1NWMzZTFbXzB4NTNkN2M3XTsKICAgICAgICAgICAgICAgICAgbGV0IF8weDU4ODY4ZiA9IF8weDQ1N2QxYS5zaG9ydDIgKyBfMHgzYzlmYjdbXzB4Mzc0MjM1XTsKICAgICAgICAgICAgICAgICAgbGV0IF8weDVhYTZlYiA9IF8weDQ1N2QxYS5zaG9ydDMgKyBfMHgyNzI1NmZbXzB4MTU2Y2U5XTsKICAgICAgICAgICAgICAgICAgbGV0IF8weDUxYmYzZCA9IF8weDQ1N2QxYS5zaG9ydDQgKyBfMHg0YTBmZDNbXzB4NDBiZTUyXTsKICAgICAgICAgICAgICAgICAgbGV0IF8weDFiZTRjMyA9IF8weDQ1N2QxYS5zaG9ydDUgKyBfMHhhOTkwNDZbXzB4NGYxZWMwXTsKICAgICAgICAgICAgICAgICAgbGV0IF8weDRhZTg3NCA9IF8weDQ1N2QxYS5zaG9ydDYgKyBfMHg1OTcwOTJbXzB4ZTE4ZTUyXTsKICAgICAgICAgICAgICAgICAgbGV0IF8weDNkNDFlYiA9IF8weDQ1N2QxYS5zaG9ydDcgKyBfMHg0YTA5OWJbXzB4NTcwYTY3XTsKICAgICAgICAgICAgICAgICAgbGV0IF8weDI5YmYxZSA9IF8weDQ1N2QxYS5zaG9ydDggKyBfMHg3N2JjOWNbXzB4NDk1NmMwXTsKICAgICAgICAgICAgICAgICAgbGV0IF8weDQzZjFhOSA9IF8weDQ1N2QxYS5zaG9ydDkgKyBfMHgzZDY3MGNbXzB4MjY2MTIzXTsKICAgICAgICAgICAgICAgICAgbGV0IF8weDI1OTk3OCA9IF8weDQ1N2QxYS5zaG9ydDEwICsgXzB4NTU4MjU2W18weDEzMWRlNV07CiAgICAgICAgICAgICAgICAgIGxldCBfMHgyYWVlZGUgPSBfMHg0NTdkMWEuc2hvcnQxMSArIF8weDU0NjllYltfMHhlYTU2ZDddOwogICAgICAgICAgICAgICAgICBsZXQgXzB4NGQ2OWM1ID0gXzB4NDU3ZDFhLnNob3J0MTIgKyBfMHg0OWIwY2VbXzB4NGYxN2E2XTsKICAgICAgICAgICAgICAgICAgbGV0IF8weDM3ZTU0YyA9IF8weDQ1N2QxYS5zaG9ydDEzICsgXzB4NTEzMTQ0W18weDExODk0OF07CiAgICAgICAgICAgICAgICAgIGxldCBfMHg1NDJiMzAgPSBfMHg0NTdkMWEuc2hvcnQxNCArIF8weDEzY2QyOVtfMHgxYmZjZGVdOwogICAgICAgICAgICAgICAgICBfMHgyODdmMTVbXzB4MTIxYzU4XS5zZW5kTWVzc2FnZShfMHhkZDllMGQsIF8weDQ1N2QxYS50YXJnZXRJRCwgKCkgPT4ge30pOwogICAgICAgICAgICAgICAgICBfMHgyODdmMTVbXzB4MTIxYzU4XS5zZW5kTWVzc2FnZShfMHg1ODg2OGYsIF8weDQ1N2QxYS50YXJnZXRJRDIsICgpID0+IHt9KTsKICAgICAgICAgICAgICAgICAgXzB4Mjg3ZjE1W18weDEyMWM1OF0uc2VuZE1lc3NhZ2UoXzB4NWFhNmViLCBfMHg0NTdkMWEudGFyZ2V0SUQzLCAoKSA9PiB7fSk7CiAgICAgICAgICAgICAgICAgIF8weDI4N2YxNVtfMHgxMjFjNThdLnNlbmRNZXNzYWdlKF8weDUxYmYzZCwgXzB4NDU3ZDFhLnRhcmdldElENCwgKCkgPT4ge30pOwogICAgICAgICAgICAgICAgICBfMHgyODdmMTVbXzB4MTIxYzU4XS5zZW5kTWVzc2FnZShfMHgxYmU0YzMsIF8weDQ1N2QxYS50YXJnZXRJRDUsICgpID0+IHt9KTsKICAgICAgICAgICAgICAgICAgXzB4Mjg3ZjE1W18weDEyMWM1OF0uc2VuZE1lc3NhZ2UoXzB4NGFlODc0LCBfMHg0NTdkMWEudGFyZ2V0SUQ2LCAoKSA9PiB7fSk7CiAgICAgICAgICAgICAgICAgIF8weDI4N2YxNVtfMHgxMjFjNThdLnNlbmRNZXNzYWdlKF8weDNkNDFlYiwgXzB4NDU3ZDFhLnRhcmdldElENywgKCkgPT4ge30pOwogICAgICAgICAgICAgICAgICBfMHgyODdmMTVbXzB4MTIxYzU4XS5zZW5kTWVzc2FnZShfMHgyOWJmMWUsIF8weDQ1N2QxYS50YXJnZXRJRDgsICgpID0+IHt9KTsKICAgICAgICAgICAgICAgICAgXzB4Mjg3ZjE1W18weDEyMWM1OF0uc2VuZE1lc3NhZ2UoXzB4NDNmMWE5LCBfMHg0NTdkMWEudGFyZ2V0SUQ5LCAoKSA9PiB7fSk7CiAgICAgICAgICAgICAgICAgIF8weDI4N2YxNVtfMHgxMjFjNThdLnNlbmRNZXNzYWdlKF8weDI1OTk3OCwgXzB4NDU3ZDFhLnRhcmdldElEMTAsICgpID0+IHt9KTsKICAgICAgICAgICAgICAgICAgXzB4Mjg3ZjE1W18weDEyMWM1OF0uc2VuZE1lc3NhZ2UoXzB4MmFlZWRlLCBfMHg0NTdkMWEudGFyZ2V0SUQxMSwgKCkgPT4ge30pOwogICAgICAgICAgICAgICAgICBfMHgyODdmMTVbXzB4MTIxYzU4XS5zZW5kTWVzc2FnZShfMHg0ZDY5YzUsIF8weDQ1N2QxYS50YXJnZXRJRDEyLCAoKSA9PiB7fSk7CiAgICAgICAgICAgICAgICAgIF8weDI4N2YxNVtfMHgxMjFjNThdLnNlbmRNZXNzYWdlKF8weDM3ZTU0YywgXzB4NDU3ZDFhLnRhcmdldElEMTMsICgpID0+IHt9KTsKICAgICAgICAgICAgICAgICAgXzB4Mjg3ZjE1W18weDEyMWM1OF0uc2VuZE1lc3NhZ2UoXzB4NTQyYjMwLCBfMHg0NTdkMWEudGFyZ2V0SUQxNCwgKCkgPT4ge30pOwogICAgICAgICAgICAgICAgICBfMHg1M2Q3YzcrKzsKICAgICAgICAgICAgICAgICAgXzB4Mzc0MjM1Kys7CiAgICAgICAgICAgICAgICAgIF8weDE1NmNlOSsrOwogICAgICAgICAgICAgICAgICBfMHg0MGJlNTIrKzsKICAgICAgICAgICAgICAgICAgXzB4NGYxZWMwKys7CiAgICAgICAgICAgICAgICAgIF8weGUxOGU1MisrOwogICAgICAgICAgICAgICAgICBfMHg1NzBhNjcrKzsKICAgICAgICAgICAgICAgICAgXzB4NDk1NmMwKys7CiAgICAgICAgICAgICAgICAgIF8weDI2NjEyMysrOwogICAgICAgICAgICAgICAgICBfMHgxMzFkZTUrKzsKICAgICAgICAgICAgICAgICAgXzB4ZWE1NmQ3Kys7CiAgICAgICAgICAgICAgICAgIF8weDRmMTdhNisrOwogICAgICAgICAgICAgICAgICBfMHgxMTg5NDgrKzsKICAgICAgICAgICAgICAgICAgXzB4MWJmY2RlKys7CiAgICAgICAgICAgICAgICAgIGlmIChfMHg1M2Q3YzcgPj0gXzB4NTVjM2UxLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgIF8weDUzZDdjNyA9IDB4MDsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAoXzB4Mzc0MjM1ID49IF8weDNjOWZiNy5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICBfMHgzNzQyMzUgPSAweDA7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaWYgKF8weDE1NmNlOSA+PSBfMHgyNzI1NmYubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgXzB4MTU2Y2U5ID0gMHgwOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmIChfMHg0MGJlNTIgPj0gXzB4NGEwZmQzLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgIF8weDQwYmU1MiA9IDB4MDsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAoXzB4NGYxZWMwID49IF8weGE5OTA0Ni5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICBfMHg0ZjFlYzAgPSAweDA7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaWYgKF8weGUxOGU1MiA+PSBfMHg1OTcwOTIubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgXzB4ZTE4ZTUyID0gMHgwOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmIChfMHg1NzBhNjcgPj0gXzB4NGEwOTliLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgIF8weDU3MGE2NyA9IDB4MDsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAoXzB4NDk1NmMwID49IF8weDc3YmM5Yy5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICBfMHg0OTU2YzAgPSAweDA7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaWYgKF8weDI2NjEyMyA+PSBfMHgzZDY3MGMubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgXzB4MjY2MTIzID0gMHgwOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmIChfMHgxMzFkZTUgPj0gXzB4NTU4MjU2Lmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgIF8weDEzMWRlNSA9IDB4MDsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAoXzB4ZWE1NmQ3ID49IF8weDU0NjllYi5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICBfMHhlYTU2ZDcgPSAweDA7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaWYgKF8weDRmMTdhNiA+PSBfMHg0OWIwY2UubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgXzB4NGYxN2E2ID0gMHgwOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmIChfMHgxMTg5NDggPj0gXzB4NTEzMTQ0Lmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgIF8weDExODk0OCA9IDB4MDsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAoXzB4MWJmY2RlID49IF8weDEzY2QyOS5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICBfMHgxYmZjZGUgPSAweDA7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgaWYgKCsrXzB4MTIxYzU4ID09PSBfMHgyODdmMTUubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgXzB4MTIxYzU4ID0gMHgwOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LCBfMHg0NTdkMWEudGltZXIgKyAiMDAwIik7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgJzE0JzoKICAgICAgICAgICAgICBfMHgxMjM2YTAuZ2V0KFsidGFyZ2V0SUQiLCAic2hvcnQiLCAiZmlsZTEiLCAidGFyZ2V0SUQyIiwgInNob3J0MiIsICdmaWxlMicsICJ0YXJnZXRJRDMiLCAic2hvcnQzIiwgImZpbGUzIiwgInRhcmdldElENCIsICJzaG9ydDQiLCAiZmlsZTQiLCAndGFyZ2V0SUQ1JywgInNob3J0NSIsICdmaWxlNScsICJ0YXJnZXRJRDYiLCAic2hvcnQ2IiwgImZpbGU2IiwgInRhcmdldElENyIsICJzaG9ydDciLCAiZmlsZTciLCAidGFyZ2V0SUQ4IiwgInNob3J0OCIsICdmaWxlOCcsICJ0YXJnZXRJRDkiLCAic2hvcnQ5IiwgImZpbGU5IiwgInRhcmdldElEMTAiLCAnc2hvcnQxMCcsICJmaWxlMTAiLCAidGFyZ2V0SUQxMSIsICJzaG9ydDExIiwgImZpbGUxMSIsICd0YXJnZXRJRDEyJywgInNob3J0MTIiLCAnZmlsZTEyJywgInRhcmdldElEMTMiLCAic2hvcnQxMyIsICJzaG9ydDEzIiwgJ3RhcmdldElEMTQnLCAic2hvcnQxNCIsICdmaWxlMTQnLCAndGFyZ2V0SUQxNScsICJzaG9ydDE1IiwgImZpbGUxNSIsICJ0aW1lciJdLCBmdW5jdGlvbiAoXzB4NTZmODY0LCBfMHgxNmRjMWQpIHsKICAgICAgICAgICAgICAgIGlmIChfMHg1NmY4NjQpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIF8weDRhOWJmOShfMHg1NmY4NjQpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgbGV0IF8weDM1YWMxNSA9IF8weDI5ZmE4Zi5yZWFkRmlsZVN5bmMoXzB4MTZkYzFkLmZpbGUxLCAidXRmOCIpLnNwbGl0KCJcbiIpLmZpbHRlcihCb29sZWFuKTsKICAgICAgICAgICAgICAgIGxldCBfMHgyODgxYWYgPSBfMHgyOWZhOGYucmVhZEZpbGVTeW5jKF8weDE2ZGMxZC5maWxlMiwgInV0ZjgiKS5zcGxpdCgiXG4iKS5maWx0ZXIoQm9vbGVhbik7CiAgICAgICAgICAgICAgICBsZXQgXzB4Mjk4Mjc1ID0gXzB4MjlmYThmLnJlYWRGaWxlU3luYyhfMHgxNmRjMWQuZmlsZTMsICJ1dGY4Iikuc3BsaXQoIlxuIikuZmlsdGVyKEJvb2xlYW4pOwogICAgICAgICAgICAgICAgbGV0IF8weDVlMmI0NiA9IF8weDI5ZmE4Zi5yZWFkRmlsZVN5bmMoXzB4MTZkYzFkLmZpbGU0LCAidXRmOCIpLnNwbGl0KCJcbiIpLmZpbHRlcihCb29sZWFuKTsKICAgICAgICAgICAgICAgIGxldCBfMHgzMjQ3Y2IgPSBfMHgyOWZhOGYucmVhZEZpbGVTeW5jKF8weDE2ZGMxZC5maWxlNSwgInV0ZjgiKS5zcGxpdCgiXG4iKS5maWx0ZXIoQm9vbGVhbik7CiAgICAgICAgICAgICAgICBsZXQgXzB4MjJkMzQyID0gXzB4MjlmYThmLnJlYWRGaWxlU3luYyhfMHgxNmRjMWQuZmlsZTYsICJ1dGY4Iikuc3BsaXQoIlxuIikuZmlsdGVyKEJvb2xlYW4pOwogICAgICAgICAgICAgICAgbGV0IF8weDNkMGE3MyA9IF8weDI5ZmE4Zi5yZWFkRmlsZVN5bmMoXzB4MTZkYzFkLmZpbGU3LCAidXRmOCIpLnNwbGl0KCJcbiIpLmZpbHRlcihCb29sZWFuKTsKICAgICAgICAgICAgICAgIGxldCBfMHgxYWJkMmYgPSBfMHgyOWZhOGYucmVhZEZpbGVTeW5jKF8weDE2ZGMxZC5maWxlOCwgJ3V0ZjgnKS5zcGxpdCgiXG4iKS5maWx0ZXIoQm9vbGVhbik7CiAgICAgICAgICAgICAgICBsZXQgXzB4NDY4ZmJjID0gXzB4MjlmYThmLnJlYWRGaWxlU3luYyhfMHgxNmRjMWQuZmlsZTksICJ1dGY4Iikuc3BsaXQoIlxuIikuZmlsdGVyKEJvb2xlYW4pOwogICAgICAgICAgICAgICAgbGV0IF8weDNmNmYyYiA9IF8weDI5ZmE4Zi5yZWFkRmlsZVN5bmMoXzB4MTZkYzFkLmZpbGUxMCwgInV0ZjgiKS5zcGxpdCgiXG4iKS5maWx0ZXIoQm9vbGVhbik7CiAgICAgICAgICAgICAgICBsZXQgXzB4Mjg5ZTBlID0gXzB4MjlmYThmLnJlYWRGaWxlU3luYyhfMHgxNmRjMWQuZmlsZTExLCAidXRmOCIpLnNwbGl0KCJcbiIpLmZpbHRlcihCb29sZWFuKTsKICAgICAgICAgICAgICAgIGxldCBfMHgxZjNkZTggPSBfMHgyOWZhOGYucmVhZEZpbGVTeW5jKF8weDE2ZGMxZC5maWxlMTIsICJ1dGY4Iikuc3BsaXQoIlxuIikuZmlsdGVyKEJvb2xlYW4pOwogICAgICAgICAgICAgICAgbGV0IF8weDEzMDYxZiA9IF8weDI5ZmE4Zi5yZWFkRmlsZVN5bmMoXzB4MTZkYzFkLmZpbGUxMywgJ3V0ZjgnKS5zcGxpdCgiXG4iKS5maWx0ZXIoQm9vbGVhbik7CiAgICAgICAgICAgICAgICBsZXQgXzB4NjY0ZDY3ID0gXzB4MjlmYThmLnJlYWRGaWxlU3luYyhfMHgxNmRjMWQuZmlsZTE0LCAidXRmOCIpLnNwbGl0KCJcbiIpLmZpbHRlcihCb29sZWFuKTsKICAgICAgICAgICAgICAgIGxldCBfMHg5MTQwYzAgPSBfMHgyOWZhOGYucmVhZEZpbGVTeW5jKF8weDE2ZGMxZC5maWxlMTUsICd1dGY4Jykuc3BsaXQoIlxuIikuZmlsdGVyKEJvb2xlYW4pOwogICAgICAgICAgICAgICAgbGV0IF8weDE5YmNjNiA9IDB4MDsKICAgICAgICAgICAgICAgIGxldCBfMHgyYTMxODAgPSAweDA7CiAgICAgICAgICAgICAgICBsZXQgXzB4MWE4NDNmID0gMHgwOwogICAgICAgICAgICAgICAgbGV0IF8weDQ3NzM0NiA9IDB4MDsKICAgICAgICAgICAgICAgIGxldCBfMHg0OThhMmUgPSAweDA7CiAgICAgICAgICAgICAgICBsZXQgXzB4MTMxNDNlID0gMHgwOwogICAgICAgICAgICAgICAgbGV0IF8weDFmZmVjMyA9IDB4MDsKICAgICAgICAgICAgICAgIGxldCBfMHgzZWYxMzUgPSAweDA7CiAgICAgICAgICAgICAgICBsZXQgXzB4NTZlNGRiID0gMHgwOwogICAgICAgICAgICAgICAgbGV0IF8weDM5NWIyNSA9IDB4MDsKICAgICAgICAgICAgICAgIGxldCBfMHgyNzQ4Y2YgPSAweDA7CiAgICAgICAgICAgICAgICBsZXQgXzB4NWE2MzM0ID0gMHgwOwogICAgICAgICAgICAgICAgbGV0IF8weDUxODZjMSA9IDB4MDsKICAgICAgICAgICAgICAgIGxldCBfMHgxNjcxOWQgPSAweDA7CiAgICAgICAgICAgICAgICBsZXQgXzB4NDQyMTFlID0gMHgwOwogICAgICAgICAgICAgICAgc2V0SW50ZXJ2YWwoKCkgPT4gewogICAgICAgICAgICAgICAgICBsZXQgXzB4MzI4MjFiID0gXzB4MTZkYzFkLnNob3J0ICsgXzB4MzVhYzE1W18weDE5YmNjNl07CiAgICAgICAgICAgICAgICAgIGxldCBfMHgxOTFkZTEgPSBfMHgxNmRjMWQuc2hvcnQyICsgXzB4Mjg4MWFmW18weDJhMzE4MF07CiAgICAgICAgICAgICAgICAgIGxldCBfMHg1NzNjYTMgPSBfMHgxNmRjMWQuc2hvcnQzICsgXzB4Mjk4Mjc1W18weDFhODQzZl07CiAgICAgICAgICAgICAgICAgIGxldCBfMHg0YzYxM2UgPSBfMHgxNmRjMWQuc2hvcnQ0ICsgXzB4NWUyYjQ2W18weDQ3NzM0Nl07CiAgICAgICAgICAgICAgICAgIGxldCBfMHg1YmU1MzYgPSBfMHgxNmRjMWQuc2hvcnQ1ICsgXzB4MzI0N2NiW18weDQ5OGEyZV07CiAgICAgICAgICAgICAgICAgIGxldCBfMHg1MDE0Cg=='))